{"version":3,"file":"sim-5fd04617.chunk.js","sources":["../../../ui/enhancement_shaman/inputs.ts","../../../ui/enhancement_shaman/presets.ts","../../../ui/enhancement_shaman/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport { ShamanSyncType } from '../core/proto/shaman.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SyncTypeInput = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecEnhancementShaman>({\n\tfieldName: 'syncType',\n\tlabel: 'Sync/Stagger Setting',\n\tlabelTooltip:\n\t\t`Choose your sync or stagger option Perfect\n\t\t<ul>\n\t\t\t<li><div>Auto: Will auto pick sync options based on your weapons attack speeds</div></li>\n\t\t\t<li><div>None: No Sync or Staggering, used for mismatched weapon speeds</div></li>\n\t\t\t<li><div>Perfect Sync: Makes your weapons always attack at the same time, for match weapon speeds</div></li>\n\t\t\t<li><div>Delayed Offhand: Adds a slight delay to the offhand attacks while staying within the 0.5s flurry ICD window</div></li>\n\t\t</ul>`,\n\tvalues: [\n\t\t{ name: \"Automatic\", value: ShamanSyncType.Auto },\n\t\t{ name: 'None', value: ShamanSyncType.NoSync },\n\t\t{ name: 'Perfect Sync', value: ShamanSyncType.SyncMainhandOffhandSwings },\n\t\t{ name: 'Delayed Offhand', value: ShamanSyncType.DelayOffhandSwings },\n\t],\n});\n","import {\n\tConsumes,\n\tDebuffs,\n\tFlask,\n\tFood,\n\tRaidBuffs,\n\tTristateEffect\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tEnhancementShaman_Options as EnhancementShamanOptions,\n\tShamanImbue,\n\tShamanShield,\n\tShamanSyncType,\n} from '../core/proto/shaman.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport BlankGear from './gear_sets/blank.gear.json';\nimport Phase1Gear from './gear_sets/phase_1.gear.json';\n\nimport Phase1APL from './apls/phase_1.apl.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const GearBlank = PresetUtils.makePresetGear('Blank', BlankGear);\nexport const GearPhase1 = PresetUtils.makePresetGear('Phase 1', Phase1Gear);\n\nexport const DefaultGear = GearPhase1\n\nexport const Phase1PresetAPL = PresetUtils.makePresetAPLRotation('Phase 1', Phase1APL);\n\nexport const DefaultAPL = Phase1PresetAPL\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\nexport const TalentsPhase1 = {\n\tname: 'Phase 1',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-5005202101',\n\t}),\n};\n\nexport const TalentsPhase2 = {\n\tname: 'Phase 2',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-5005202105023051',\n\t}),\n};\n\nexport const DefaultTalents = TalentsPhase1;\n\nexport const DefaultOptions = EnhancementShamanOptions.create({\n\tshield: ShamanShield.LightningShield,\n\timbueMh: ShamanImbue.RockbiterWeapon,\n\timbueOh: ShamanImbue.RockbiterWeapon,\n\tsyncType: ShamanSyncType.Auto,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskUnknown,\n\tfood: Food.FoodUnknown,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\taspectOfTheLion: true,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\tleaderOfThePack: true,\n\tmoonkinAura: true,\n\tdivineSpirit: true,\n\tbattleShout: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tsunderArmor: true,\n\tcurseOfElements: true,\n\tcurseOfRecklessness: true,\n\tfaerieFire: true,\n});\n\nexport const OtherDefaults = {\n};\n","import { ShamanImbueInputMH, ShamanImbueInputOH } from '../core/components/inputs/shaman_imbues.js';\nimport { ShamanShieldInput } from '../core/components/inputs/shaman_shields.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport { APLRotation } from '../core/proto/apl.js';\nimport {\n\tClass,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tSpec,\n\tStat,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecEnhancementShaman, {\n\tcssClass: 'enhancement-shaman-sim-ui',\n\tcssScheme: 'shaman',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellHaste,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t\tPseudoStat.PseudoStatOffHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatExpertise,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 1.48,\n\t\t\t[Stat.StatAgility]: 1.59,\n\t\t\t[Stat.StatStrength]: 1.1,\n\t\t\t[Stat.StatSpellPower]: 1.13,\n\t\t\t[Stat.StatSpellHit]: 0, //default EP assumes cap\n\t\t\t[Stat.StatSpellCrit]: 0.91,\n\t\t\t[Stat.StatSpellHaste]: 0.37,\n\t\t\t[Stat.StatAttackPower]: 1.0,\n\t\t\t[Stat.StatMeleeHit]: 1.38,\n\t\t\t[Stat.StatMeleeCrit]: 0.81,\n\t\t\t[Stat.StatMeleeHaste]: 1.61, //haste is complicated\n\t\t\t[Stat.StatArmorPenetration]: 0.48,\n\t\t\t[Stat.StatExpertise]: 0, //default EP assumes cap\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 5.21,\n\t\t\t[PseudoStat.PseudoStatOffHandDps]: 2.21,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tShamanShieldInput<Spec.SpecEnhancementShaman>(),\n\t\tShamanImbueInputMH<Spec.SpecEnhancementShaman>(),\n\t\tShamanImbueInputOH<Spec.SpecEnhancementShaman>(),\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.BlessingOfWisdom,\n\t\tBuffDebuffInputs.ManaSpringTotem,\n\t\tBuffDebuffInputs.SpiritBuff,\n\t],\n\texcludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.BleedDebuff,\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tShamanInputs.SyncTypeInput,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\titemSwapSlots: [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand],\n\tcustomSections: [\n\t\t// TotemsSection,\n\t],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.TalentsPhase1,\n\t\t\tPresets.TalentsPhase2,\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.Phase1PresetAPL,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.GearBlank,\n\t\t\tPresets.GearPhase1,\n\t\t],\n\t},\n\n\tautoRotation: (_): APLRotation => {\n\t\treturn Presets.DefaultAPL.rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecBalanceDruid,\n\t\t\ttooltip: specNames[Spec.SpecBalanceDruid],\n\t\t\tdefaultName: 'Balance',\n\t\t\ticonUrl: getSpecIcon(Class.ClassDruid, 0),\n\n\t\t\ttalents: Presets.DefaultTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.DefaultGear.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.DefaultGear.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n})\n\nexport class EnhancementShamanSimUI extends IndividualSimUI<Spec.SpecEnhancementShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecEnhancementShaman>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["SyncTypeInput","InputHelpers.makeSpecOptionsEnumInput","fieldName","label","labelTooltip","values","name","value","ShamanSyncType","Auto","NoSync","SyncMainhandOffhandSwings","DelayOffhandSwings","GearBlank","PresetUtils.makePresetGear","GearPhase1","Phase1Gear","DefaultGear","Phase1PresetAPL","PresetUtils.makePresetAPLRotation","Phase1APL","DefaultAPL","TalentsPhase1","data","SavedTalents","create","talentsString","TalentsPhase2","DefaultTalents","DefaultOptions","EnhancementShamanOptions","shield","ShamanShield","LightningShield","imbueMh","ShamanImbue","RockbiterWeapon","imbueOh","syncType","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodUnknown","DefaultRaidBuffs","RaidBuffs","aspectOfTheLion","strengthOfEarthTotem","TristateEffect","TristateEffectImproved","giftOfTheWild","arcaneBrilliance","leaderOfThePack","moonkinAura","divineSpirit","battleShout","DefaultDebuffs","Debuffs","sunderArmor","curseOfElements","curseOfRecklessness","faerieFire","SPEC_CONFIG","registerSpecConfig","Spec","SpecEnhancementShaman","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatSpellPower","StatSpellCrit","StatSpellHit","StatSpellHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.DefaultGear","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","debuffs","Presets.DefaultDebuffs","playerIconInputs","ShamanShieldInput","ShamanImbueInputMH","ShamanImbueInputOH","includeBuffDebuffInputs","BuffDebuffInputs.BlessingOfWisdom","BuffDebuffInputs.ManaSpringTotem","BuffDebuffInputs.SpiritBuff","excludeBuffDebuffInputs","BuffDebuffInputs.BleedDebuff","otherInputs","inputs","ShamanInputs.SyncTypeInput","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","itemSwapSlots","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","customSections","encounterPicker","showExecuteProportion","presets","Presets.TalentsPhase1","Presets.TalentsPhase2","rotations","Presets.Phase1PresetAPL","Presets.GearBlank","Presets.GearPhase1","autoRotation","_","Presets.DefaultAPL","rotation","raidSimPresets","spec","SpecBalanceDruid","tooltip","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassDruid","otherDefaults","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceNightElf","Horde","RaceTauren","defaultGear","EnhancementShamanSimUI","IndividualSimUI","constructor","parentElem","player","super"],"mappings":"gaAQa,MAAAA,EAAgBC,EAAkE,CAC9FC,UAAW,WACXC,MAAO,uBACPC,aACC,wfAODC,OAAQ,CACP,CAAEC,KAAM,YAAaC,MAAOC,EAAeC,MAC3C,CAAEH,KAAM,OAAQC,MAAOC,EAAeE,QACtC,CAAEJ,KAAM,eAAgBC,MAAOC,EAAeG,2BAC9C,CAAEL,KAAM,kBAAmBC,MAAOC,EAAeI,0sCCKtCC,EAAYC,EAA2B,oBACvCC,EAAaD,EAA2B,UAAWE,GAEnDC,EAAcF,EAEdG,EAAkBC,EAAkC,UAAWC,GAE/DC,EAAaH,EAIbI,EAAgB,CAC5BhB,KAAM,UACNiB,KAAMC,EAAaC,OAAO,CACzBC,cAAe,iBAIJC,EAAgB,CAC5BrB,KAAM,UACNiB,KAAMC,EAAaC,OAAO,CACzBC,cAAe,uBAIJE,EAAiBN,EAEjBO,EAAiBC,EAAyBL,OAAO,CAC7DM,OAAQC,EAAaC,gBACrBC,QAASC,EAAYC,gBACrBC,QAASF,EAAYC,gBACrBE,SAAU9B,EAAeC,OAGb8B,EAAkBC,EAASf,OAAO,CAC9CgB,MAAOC,EAAMC,aACbC,KAAMC,EAAKC,cAGCC,EAAmBC,EAAUvB,OAAO,CAChDwB,iBAAiB,EACjBC,qBAAsBC,EAAeC,uBACrCC,cAAeF,EAAeC,uBAC9BE,kBAAkB,EAClBC,iBAAiB,EACjBC,aAAa,EACbC,cAAc,EACdC,YAAaP,EAAeC,yBAGhBO,EAAiBC,EAAQnC,OAAO,CAC5CoC,aAAa,EACbC,iBAAiB,EACjBC,qBAAqB,EACrBC,YAAY,ICzDPC,EAAcC,EAAmBC,EAAKC,sBAAuB,CAClEC,SAAU,4BACVC,UAAW,SAEXC,YAAa,GAIbC,QAAS,CACRC,EAAKC,cACLD,EAAKE,YACLF,EAAKG,aACLH,EAAKI,gBACLJ,EAAKK,aACLL,EAAKM,cACLN,EAAKO,eACLP,EAAKQ,qBACLR,EAAKS,cACLT,EAAKU,eACLV,EAAKW,cACLX,EAAKY,aACLZ,EAAKa,gBAENC,cAAe,CACdC,EAAWC,sBACXD,EAAWE,sBAGZC,gBAAiBlB,EAAKI,gBAEtBe,aAAc,CACbnB,EAAKoB,WACLpB,EAAKqB,YACLrB,EAAKG,aACLH,EAAKE,YACLF,EAAKC,cACLD,EAAKI,gBACLJ,EAAKK,aACLL,EAAKM,cACLN,EAAKO,eACLP,EAAKS,cACLT,EAAKQ,qBACLR,EAAKU,eACLV,EAAKY,aACLZ,EAAKW,cACLX,EAAKa,gBAGNS,SAAU,CAETC,KAAMC,EAAoBD,KAE1BE,UAAWC,EAAMC,QAAQ,CACxB,CAAC3B,EAAKC,eAAgB,KACtB,CAACD,EAAKE,aAAc,KACpB,CAACF,EAAKG,cAAe,IACrB,CAACH,EAAKU,gBAAiB,KACvB,CAACV,EAAKY,cAAe,EACrB,CAACZ,EAAKW,eAAgB,IACtB,CAACX,EAAKa,gBAAiB,IACvB,CAACb,EAAKI,iBAAkB,EACxB,CAACJ,EAAKK,cAAe,KACrB,CAACL,EAAKM,eAAgB,IACtB,CAACN,EAAKO,gBAAiB,KACvB,CAACP,EAAKQ,sBAAuB,IAC7B,CAACR,EAAKS,eAAgB,GACpB,CACF,CAACM,EAAWC,uBAAwB,KACpC,CAACD,EAAWE,sBAAuB,OAGpCW,SAAUC,EAEVC,QAASC,EAAuBjF,KAEhCkF,YAAaC,EAEbC,UAAWC,EACXC,WAAYC,EAAWrF,OAAO,IAE9BsF,gBAAiBC,EAAgBvF,OAAO,CACvCwF,iBAAiB,EACjBC,iBAAkB/D,EAAeC,uBACjC+D,gBAAiBhE,EAAeC,yBAEjCgE,QAASC,GAIVC,iBAAkB,CACjBC,IACAC,IACAC,KAGDC,wBAAyB,CACxBC,EACAC,EACAC,GAEDC,wBAAyB,CACxBC,GAGDC,YAAa,CACZC,OAAQ,CACPC,EACAC,EACAC,IAGFC,cAAe,CAACC,EAASC,iBAAkBD,EAASE,iBACpDC,eAAgB,GAGhBC,gBAAiB,CAEhBC,uBAAuB,GAGxBC,QAAS,CAERrC,QAAS,CACRsC,EACAC,GAGDC,UAAW,CACVC,GAGDhD,KAAM,CACLiD,EACAC,IAIFC,aAAeC,GACPC,EAAmBC,SAASA,SAGpCC,eAAgB,CACf,CACCC,KAAMrF,EAAKsF,iBACXC,QAASC,EAAUxF,EAAKsF,kBACxBG,YAAa,UACbC,QAASC,EAAYC,EAAMC,WAAY,GAEvCzD,QAASC,EAAuBjF,KAChCkF,YAAaC,EACbL,SAAUC,EACV2D,cD3F0B,CAC7B,EC2FGC,oBAAqB,CACpB,CAACC,EAAQC,SAAUC,EAAKC,YACxB,CAACH,EAAQI,UAAWF,EAAKG,aACzB,CAACL,EAAQM,OAAQJ,EAAKK,YAEvBC,YAAa,CACZ,CAACR,EAAQC,SAAU,CAAC,EACpB,CAACD,EAAQI,UAAW,CACnB,EAAGtE,EAAoBD,MAExB,CAACmE,EAAQM,OAAQ,CAChB,EAAGxE,EAAoBD,WAOrB,MAAM4E,UAA+BC,EAC3C,WAAAC,CAAYC,EAAyBC,GAC9BC,MAAAF,EAAYC,EAAQ/G,EAC3B"}