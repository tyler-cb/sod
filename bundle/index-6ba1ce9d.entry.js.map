{"version":3,"file":"index-6ba1ce9d.entry.js","sources":["../../../ui/raid/presets.ts","../../../ui/raid/raid_picker.ts","../../../ui/raid/raid_stats.ts","../../../ui/raid/raid_tab.ts","../../../ui/core/components/raid_target_picker.ts","../../../ui/raid/assignments_picker.ts","../../../ui/raid/blessings_picker.ts","../../../ui/raid/tanks_picker.ts","../../../ui/raid/settings_tab.ts","../../../ui/raid/import_export.ts","../../../ui/raid/raid_sim_ui.ts","../../../ui/raid/index.ts"],"sourcesContent":["import { IndividualSimUI, IndividualSimUIConfig, RaidSimPreset } from '../core/individual_sim_ui.js';\n\nimport {\n\tSpec\n} from '../core/proto/common.js';\nimport {\n\tnaturalSpecOrder,\n} from '../core/proto_utils/utils.js';\n\nimport { Player, getSpecConfig } from '../core/player.js';\n\nimport { BalanceDruidSimUI } from '../balance_druid/sim.js';\nimport { FeralDruidSimUI } from '../feral_druid/sim.js';\nimport { FeralTankDruidSimUI } from '../feral_tank_druid/sim.js';\nimport { RestorationDruidSimUI } from '../restoration_druid/sim.js';\nimport { ElementalShamanSimUI } from '../elemental_shaman/sim.js';\nimport { EnhancementShamanSimUI } from '../enhancement_shaman/sim.js';\nimport { RestorationShamanSimUI } from '../restoration_shaman/sim.js';\nimport { HunterSimUI } from '../hunter/sim.js';\nimport { MageSimUI } from '../mage/sim.js';\nimport { RogueSimUI } from '../rogue/sim.js';\nimport { HolyPaladinSimUI } from '../holy_paladin/sim.js';\nimport { ProtectionPaladinSimUI } from '../protection_paladin/sim.js';\nimport { RetributionPaladinSimUI } from '../retribution_paladin/sim.js';\nimport { HealingPriestSimUI } from '../healing_priest/sim.js';\nimport { ShadowPriestSimUI } from '../shadow_priest/sim.js';\nimport { WarriorSimUI } from '../warrior/sim.js';\nimport { ProtectionWarriorSimUI } from '../protection_warrior/sim.js';\nimport { WarlockSimUI } from '../warlock/sim.js';\nimport { TankWarlockSimUI } from '../tank_warlock/sim.js';\n\nexport const specSimFactories: Record<Spec, (parentElem: HTMLElement, player: Player<any>) => IndividualSimUI<any>> = {\n\t[Spec.SpecBalanceDruid]: (parentElem: HTMLElement, player: Player<any>) => new BalanceDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralTankDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralTankDruidSimUI(parentElem, player),\n\t[Spec.SpecRestorationDruid]: (parentElem: HTMLElement, player: Player<any>) => new RestorationDruidSimUI(parentElem, player),\n\t[Spec.SpecElementalShaman]: (parentElem: HTMLElement, player: Player<any>) => new ElementalShamanSimUI(parentElem, player),\n\t[Spec.SpecEnhancementShaman]: (parentElem: HTMLElement, player: Player<any>) => new EnhancementShamanSimUI(parentElem, player),\n\t[Spec.SpecRestorationShaman]: (parentElem: HTMLElement, player: Player<any>) => new RestorationShamanSimUI(parentElem, player),\n\t[Spec.SpecHunter]: (parentElem: HTMLElement, player: Player<any>) => new HunterSimUI(parentElem, player),\n\t[Spec.SpecMage]: (parentElem: HTMLElement, player: Player<any>) => new MageSimUI(parentElem, player),\n\t[Spec.SpecRogue]: (parentElem: HTMLElement, player: Player<any>) => new RogueSimUI(parentElem, player),\n\t[Spec.SpecHolyPaladin]: (parentElem: HTMLElement, player: Player<any>) => new HolyPaladinSimUI(parentElem, player),\n\t[Spec.SpecProtectionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionPaladinSimUI(parentElem, player),\n\t[Spec.SpecRetributionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new RetributionPaladinSimUI(parentElem, player),\n\t[Spec.SpecHealingPriest]: (parentElem: HTMLElement, player: Player<any>) => new HealingPriestSimUI(parentElem, player),\n\t[Spec.SpecShadowPriest]: (parentElem: HTMLElement, player: Player<any>) => new ShadowPriestSimUI(parentElem, player),\n\t[Spec.SpecWarrior]: (parentElem: HTMLElement, player: Player<any>) => new WarriorSimUI(parentElem, player),\n\t[Spec.SpecProtectionWarrior]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionWarriorSimUI(parentElem, player),\n\t[Spec.SpecWarlock]: (parentElem: HTMLElement, player: Player<any>) => new WarlockSimUI(parentElem, player),\n\t[Spec.SpecTankWarlock]: (parentElem: HTMLElement, player: Player<any>) => new TankWarlockSimUI(parentElem, player),\n};\n\nexport const playerPresets: Array<RaidSimPreset<any>> = naturalSpecOrder\n\t.map(getSpecConfig)\n\t.map(config => {\n\t\tconst indSimUiConfig = config as IndividualSimUIConfig<any>;\n\t\treturn indSimUiConfig.raidSimPresets;\n\t})\n\t.flat();\n\nexport const implementedSpecs: Array<Spec> = [...new Set(playerPresets.map(preset => preset.spec))];\n","import { Component } from '../core/components/component.js';\nimport { EnumPicker } from '../core/components/enum_picker.js';\nimport { Raid } from '../core/raid.js';\nimport { MAX_PARTY_SIZE } from '../core/party.js';\nimport { Party } from '../core/party.js';\nimport { Player } from '../core/player.js';\nimport { Player as PlayerProto } from '../core/proto/api.js';\nimport { Class } from '../core/proto/common.js';\nimport { Profession } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Faction } from '../core/proto/common.js';\nimport { cssClassForClass, playerToSpec } from '../core/proto_utils/utils.js';\nimport { isTankSpec } from '../core/proto_utils/utils.js';\nimport { specToClass } from '../core/proto_utils/utils.js';\nimport { newUnitReference } from '../core/proto_utils/utils.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { formatDeltaTextElem } from '../core/utils.js';\nimport { getEnumValues } from '../core/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { playerPresets, specSimFactories } from './presets.js';\n\nimport { BalanceDruid_Options as BalanceDruidOptions } from '../core/proto/druid.js';\nimport { BaseModal } from '../core/components/base_modal.js';\nimport { Tooltip } from 'bootstrap';\n\nconst NEW_PLAYER: number = -1;\n\nenum DragType {\n\tNone,\n\tNew,\n\tMove,\n\tSwap,\n\tCopy,\n}\n\nexport class RaidPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly raid: Raid;\n\treadonly partyPickers: Array<PartyPicker>;\n\treadonly newPlayerPicker: NewPlayerPicker;\n\n\t// Hold data about the player being dragged while the drag is happening.\n\tcurrentDragPlayer: Player<any> | null = null;\n\tcurrentDragPlayerFromIndex: number = NEW_PLAYER;\n\tcurrentDragType: DragType = DragType.New;\n\n\t// Hold data about the party being dragged while the drag is happening.\n\tcurrentDragParty: PartyPicker | null = null;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.raid = raidSimUI.sim.raid;\n\n\t\tconst raidControls = document.createElement('div');\n\t\traidControls.classList.add('raid-controls');\n\t\tthis.rootElem.appendChild(raidControls);\n\n\t\tthis.newPlayerPicker = new NewPlayerPicker(this.rootElem, this);\n\n\t\tnew EnumPicker<Raid>(raidControls, this.raidSimUI.sim.raid, {\n\t\t\tlabel: 'Raid Size',\n\t\t\tlabelTooltip: 'Number of players participating in the sim.',\n\t\t\tvalues: [\n\t\t\t\t{ name: '5', value: 1 },\n\t\t\t\t{ name: '10', value: 2 },\n\t\t\t\t{ name: '25', value: 5 },\n\t\t\t\t{ name: '40', value: 8 },\n\t\t\t],\n\t\t\tchangedEvent: (raid: Raid) => raid.numActivePartiesChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getNumActiveParties(),\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: number) => {\n\t\t\t\traid.setNumActiveParties(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tnew EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Faction',\n\t\t\tlabelTooltip: 'Default faction for newly-created players.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Alliance', value: Faction.Alliance },\n\t\t\t\t{ name: 'Horde', value: Faction.Horde },\n\t\t\t],\n\t\t\tchangedEvent: () => this.raid.sim.factionChangeEmitter,\n\t\t\tgetValue: () => this.raid.sim.getFaction(),\n\t\t\tsetValue: (eventID: EventID, _picker: NewPlayerPicker, newValue: Faction) => {\n\t\t\t\tthis.raid.sim.setFaction(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst latestPhaseWithAllPresets = Math.min(...playerPresets.map(preset => Math.max(...Object.keys(preset.defaultGear[Faction.Alliance]).map(k => parseInt(k)))));\n\t\tnew EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Gear',\n\t\t\tlabelTooltip: 'Newly-created players will start with approximate BIS gear from this phase.',\n\t\t\tvalues: [...Array(latestPhaseWithAllPresets).keys()].map(val => {\n\t\t\t\tconst phase = val + 1;\n\t\t\t\treturn { name: 'Phase ' + phase, value: phase };\n\t\t\t}),\n\t\t\tchangedEvent: () => this.raid.sim.phaseChangeEmitter,\n\t\t\tgetValue: () => this.raid.sim.getPhase(),\n\t\t\tsetValue: (eventID: EventID, _picker: NewPlayerPicker, newValue: number) => {\n\t\t\t\tthis.raid.sim.setPhase(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst partiesContainer = document.createElement('div');\n\t\tpartiesContainer.classList.add('parties-container');\n\t\tthis.rootElem.appendChild(partiesContainer);\n\n\t\tthis.partyPickers = this.raid.getParties().map((party, i) => new PartyPicker(partiesContainer, party, i, this));\n\n\t\tconst updateActiveParties = () => {\n\t\t\tthis.partyPickers.forEach(partyPicker => {\n\t\t\t\tif (partyPicker.index < this.raidSimUI.sim.raid.getNumActiveParties()) {\n\t\t\t\t\tpartyPicker.rootElem.classList.add('active');\n\t\t\t\t} else {\n\t\t\t\t\tpartyPicker.rootElem.classList.remove('active');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tthis.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(updateActiveParties);\n\t\tupdateActiveParties();\n\n\t\tthis.rootElem.ondragend = () => {\n\t\t\t// Uncomment to remove player when dropped 'off' the raid.\n\t\t\t//if (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t//\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\t//\tplayerPicker.setPlayer(null, null, DragType.None);\n\t\t\t//}\n\n\t\t\tthis.clearDragPlayer();\n\t\t\tthis.clearDragParty();\n\t\t};\n\t}\n\n\tgetCurrentFaction(): Faction {\n\t\treturn this.raid.sim.getFaction();\n\t}\n\n\tgetCurrentPhase(): number {\n\t\treturn this.raid.sim.getPhase();\n\t}\n\n\tgetPlayerPicker(raidIndex: number): PlayerPicker {\n\t\treturn this.partyPickers[Math.floor(raidIndex / MAX_PARTY_SIZE)].playerPickers[raidIndex % MAX_PARTY_SIZE];\n\t}\n\n\tgetPlayerPickers(): Array<PlayerPicker> {\n\t\treturn [...new Array(25).keys()].map(i => this.getPlayerPicker(i));\n\t}\n\n\tsetDragPlayer(player: Player<any>, fromIndex: number, type: DragType) {\n\t\tthis.clearDragPlayer();\n\n\t\tthis.currentDragPlayer = player;\n\t\tthis.currentDragPlayerFromIndex = fromIndex;\n\t\tthis.currentDragType = type;\n\n\t\tif (fromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(fromIndex);\n\t\t\tplayerPicker.rootElem.classList.add('dragfrom');\n\t\t}\n\t}\n\n\tclearDragPlayer() {\n\t\tif (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\tplayerPicker.rootElem.classList.remove('dragfrom');\n\t\t}\n\n\t\tthis.currentDragPlayer = null;\n\t\tthis.currentDragPlayerFromIndex = NEW_PLAYER;\n\t\tthis.currentDragType = DragType.New;\n\t}\n\n\tsetDragParty(party: PartyPicker) {\n\t\tthis.currentDragParty = party;\n\t\tparty.rootElem.classList.add('dragfrom');\n\t}\n\tclearDragParty() {\n\t\tif (this.currentDragParty) {\n\t\t\tthis.currentDragParty.rootElem.classList.remove('dragfrom');\n\t\t\tthis.currentDragParty = null;\n\t\t}\n\t}\n}\n\nexport class PartyPicker extends Component {\n\treadonly party: Party;\n\treadonly index: number;\n\treadonly raidPicker: RaidPicker;\n\treadonly playerPickers: Array<PlayerPicker>;\n\n\tconstructor(parent: HTMLElement, party: Party, index: number, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'party-picker-root');\n\t\tthis.party = party;\n\t\tthis.index = index;\n\t\tthis.raidPicker = raidPicker;\n\n\t\tthis.rootElem.setAttribute('draggable', 'true');\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"party-header\">\n\t\t\t\t<label class=\"party-label form-label\">Group ${index + 1}</label>\n\t\t\t\t<div class=\"party-results\">\n\t\t\t\t\t<span class=\"party-results-dps\"></span>\n\t\t\t\t\t<span class=\"party-results-reference-delta\"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"players-container\">\n\t\t\t</div>\n\t\t`;\n\n\t\tconst playersContainer = this.rootElem.getElementsByClassName('players-container')[0] as HTMLDivElement;\n\t\tthis.playerPickers = [...Array(MAX_PARTY_SIZE).keys()].map(i => new PlayerPicker(playersContainer, this, i));\n\n\t\tconst dpsResultElem = this.rootElem.getElementsByClassName('party-results-dps')[0] as HTMLElement;\n\t\tconst referenceDeltaElem = this.rootElem.getElementsByClassName('party-results-reference-delta')[0] as HTMLElement;\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst partyDps = currentData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\n\t\t\tif (partyDps == 0 && referenceDps == 0) {\n\t\t\t\tdpsResultElem.textContent = '';\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdpsResultElem.textContent = `${partyDps.toFixed(1)} DPS`;\n\n\t\t\tif (!referenceData) {\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformatDeltaTextElem(referenceDeltaElem, referenceDps, partyDps, 1);\n\t\t});\n\n\t\tthis.rootElem.ondragstart = event => {\n\t\t\tif (event.target == this.rootElem) {\n\t\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\t\t\t\tthis.raidPicker.setDragParty(this);\n\t\t\t}\n\t\t};\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => {\n\t\t\tevent.preventDefault();\n\t\t};\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tconst srcPartyPicker = this.raidPicker.currentDragParty!;\n\n\t\t\t\tfor (let i = 0; i < MAX_PARTY_SIZE; i++) {\n\t\t\t\t\tconst srcPlayerPicker = srcPartyPicker.playerPickers[i]!;\n\t\t\t\t\tconst dstPlayerPicker = this.playerPickers[i]!;\n\n\t\t\t\t\tconst srcPlayer = srcPlayerPicker.player;\n\t\t\t\t\tconst dstPlayer = dstPlayerPicker.player;\n\n\t\t\t\t\tsrcPlayerPicker.setPlayer(eventID, dstPlayer, DragType.Swap);\n\t\t\t\t\tdstPlayerPicker.setPlayer(eventID, srcPlayer, DragType.Swap);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.raidPicker.clearDragParty();\n\t\t};\n\t}\n}\n\nexport class PlayerPicker extends Component {\n\t// Index of this player within its party (0-4).\n\treadonly index: number;\n\n\t// Index of this player within the whole raid (0-24).\n\treadonly raidIndex: number;\n\n\tplayer: Player<any> | null;\n\n\treadonly partyPicker: PartyPicker;\n\treadonly raidPicker: RaidPicker;\n\n\tprivate labelElem: HTMLElement | null;\n\tprivate iconElem: HTMLImageElement | null;\n\tprivate nameElem: HTMLInputElement | null;\n\tprivate resultsElem: HTMLElement | null;\n\tprivate dpsResultElem: HTMLElement | null;\n\tprivate referenceDeltaElem: HTMLElement | null;\n\n\tconstructor(parent: HTMLElement, partyPicker: PartyPicker, index: number) {\n\t\tsuper(parent, 'player-picker-root');\n\t\tthis.index = index;\n\t\tthis.raidIndex = partyPicker.index * MAX_PARTY_SIZE + index;\n\t\tthis.player = null;\n\t\tthis.partyPicker = partyPicker;\n\t\tthis.raidPicker = partyPicker.raidPicker;\n\n\t\tthis.labelElem = null;\n\t\tthis.iconElem = null;\n\t\tthis.nameElem = null;\n\t\tthis.resultsElem = null;\n\t\tthis.dpsResultElem = null;\n\t\tthis.referenceDeltaElem = null;\n\n\t\tthis.rootElem.classList.add('player');\n\n\t\tthis.partyPicker.party.compChangeEmitter.on(eventID => {\n\t\t\tconst newPlayer = this.partyPicker.party.getPlayer(this.index);\n\t\t\tif (newPlayer != this.player)\n\t\t\t\tthis.setPlayer(eventID, newPlayer, DragType.None);\n\t\t});\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst playerDps = currentData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\n\t\t\tif (this.player) {\n\t\t\t\tthis.resultsElem?.classList.remove('hide');\n\t\t\t\t(this.dpsResultElem as HTMLElement).textContent = `${playerDps.toFixed(1)} DPS`;\n\n\t\t\t\tif (referenceData)\n\t\t\t\t\tformatDeltaTextElem(this.referenceDeltaElem as HTMLElement, referenceDps, playerDps, 1);\n\t\t\t}\n\t\t});\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => event.preventDefault();\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar dropData = event.dataTransfer!.getData(\"text/plain\");\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.raidPicker.currentDragPlayer == null && dropData.length == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex == this.raidIndex) {\n\t\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst dragType = this.raidPicker.currentDragType;\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t\t\tconst fromPlayerPicker = this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);\n\t\t\t\t\tif (dragType == DragType.Swap) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, this.player, dragType);\n\t\t\t\t\t} else if (dragType == DragType.Move) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, null, dragType);\n\t\t\t\t\t}\n\t\t\t\t} else if (this.raidPicker.currentDragPlayer == null) {\n\t\t\t\t\t// This would be a copy from another window.\n\t\t\t\t\tconst binary = atob(dropData);\n\t\t\t\t\tconst bytes = new Uint8Array(binary.length);\n\t\t\t\t\tfor (let i = 0; i < bytes.length; i++) {\n\t\t\t\t\t\tbytes[i] = binary.charCodeAt(i);\n\t\t\t\t\t}\n\t\t\t\t\tconst playerProto = PlayerProto.fromBinary(bytes);\n\n\t\t\t\t\tvar localPlayer = new Player(playerToSpec(playerProto), this.raidPicker.raidSimUI.sim);\n\t\t\t\t\tlocalPlayer.fromProto(eventID, playerProto);\n\t\t\t\t\tthis.raidPicker.currentDragPlayer = localPlayer;\n\t\t\t\t}\n\n\t\t\t\tif (dragType == DragType.Copy) {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer!.clone(eventID), dragType);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer, dragType);\n\t\t\t\t}\n\n\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t});\n\t\t};\n\n\t\tthis.update();\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: Player<any> | null, dragType: DragType) {\n\t\tif (newPlayer == this.player) {\n\t\t\treturn;\n\t\t}\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.player = newPlayer;\n\t\t\tif (newPlayer) {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\n\t\t\t\tif (dragType == DragType.New) {\n\t\t\t\t\tapplyNewPlayerAssignments(eventID, newPlayer, this.raidPicker.raid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\t\t\t\tthis.partyPicker.party.compChangeEmitter.emit(eventID);\n\t\t\t}\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tif (this.player == null) {\n\t\t\tthis.rootElem.className = 'player-picker-root player';\n\t\t\tthis.rootElem.innerHTML = '';\n\n\t\t\tthis.labelElem = null;\n\t\t\tthis.iconElem = null;\n\t\t\tthis.nameElem = null;\n\t\t\tthis.resultsElem = null;\n\t\t\tthis.dpsResultElem = null;\n\t\t\tthis.referenceDeltaElem = null;\n\t\t} else {\n\t\t\tconst classCssClass = cssClassForClass(this.player.getClass());\n\n\t\t\tthis.rootElem.className = `player-picker-root player bg-${classCssClass}-dampened`;\n\t\t\tthis.rootElem.innerHTML = `\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t<img class=\"player-icon\" src=\"${this.player.getSpecIcon()}\" draggable=\"true\" />\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass=\"player-name text-${classCssClass}\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue=\"${this.player.getName()}\"\n\t\t\t\t\t\t\tspellcheck=\"false\"\n\t\t\t\t\t\t\tmaxlength=\"15\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class=\"player-results hide\">\n\t\t\t\t\t\t\t<span class=\"player-results-dps\"></span>\n\t\t\t\t\t\t\t<span class=\"player-results-reference-delta\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"player-options\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-edit\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Edit\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-edit fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-copy link-warning\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Drag to Copy\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-copy fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-delete link-danger\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Delete\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-times fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`;\n\n\t\t\tthis.labelElem = this.rootElem.querySelector('.player-label') as HTMLElement;\n\t\t\tthis.iconElem = this.rootElem.querySelector('.player-icon') as HTMLImageElement;\n\t\t\tthis.nameElem = this.rootElem.querySelector('.player-name') as HTMLInputElement;\n\t\t\tthis.resultsElem = this.rootElem.querySelector('.player-results') as HTMLElement;\n\t\t\tthis.dpsResultElem = this.rootElem.querySelector('.player-results-dps') as HTMLElement;\n\t\t\tthis.referenceDeltaElem = this.rootElem.querySelector('.player-results-reference-delta') as HTMLElement;\n\n\t\t\tthis.bindPlayerEvents();\n\t\t}\n\t}\n\n\tprivate bindPlayerEvents() {\n\t\tthis.nameElem?.addEventListener('input', _event => {\n\t\t\tthis.player?.setName(TypedEvent.nextEventID(), this.nameElem?.value || '');\n\t\t});\n\n\t\tthis.nameElem?.addEventListener('mousedown', _event => {\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'false')\n\t\t})\n\n\t\tthis.nameElem?.addEventListener('mouseup', _event => {\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'true')\n\t\t})\n\n\t\tconst emptyName = 'Unnamed';\n\t\tthis.nameElem?.addEventListener('focusout', _event => {\n\t\t\tif (this.nameElem && !this.nameElem.value) {\n\t\t\t\tthis.nameElem.value = emptyName;\n\t\t\t\tthis.player?.setName(TypedEvent.nextEventID(), emptyName);\n\t\t\t}\n\t\t});\n\n\t\tconst dragStart = (event: DragEvent, type: DragType) => {\n\t\t\tif (this.player == null) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\n\t\t\tif (this.player) {\n\t\t\t\tvar playerDataProto = this.player.toProto(true);\n\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", btoa(String.fromCharCode(...PlayerProto.toBinary(playerDataProto))));\n\t\t\t}\n\n\t\t\tthis.raidPicker.setDragPlayer(this.player, this.raidIndex, type);\n\t\t};\n\n\t\tconst editElem = this.rootElem.querySelector('.player-edit') as HTMLElement;\n\t\tconst copyElem = this.rootElem.querySelector('.player-copy') as HTMLElement;\n\t\tconst deleteElem = this.rootElem.querySelector('.player-delete') as HTMLElement;\n\n\t\tconst _editTooltip = Tooltip.getOrCreateInstance(editElem);\n\t\tconst _copyTooltip = Tooltip.getOrCreateInstance(copyElem);\n\t\tconst deleteTooltip = Tooltip.getOrCreateInstance(deleteElem);\n\n\t\t(this.iconElem as HTMLElement).ondragstart = event => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Swap)\n\t\t}\n\t\teditElem.onclick = _event => {\n\t\t\tnew PlayerEditorModal(this.player as Player<any>);\n\t\t};\n\t\tcopyElem.ondragstart = event => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Copy);\n\t\t}\n\t\tdeleteElem.onclick = _event => {\n\t\t\tdeleteTooltip.hide();\n\t\t\tthis.setPlayer(TypedEvent.nextEventID(), null, DragType.None);\n\t\t}\n\t}\n}\n\nclass PlayerEditorModal extends BaseModal {\n\tconstructor(player: Player<any>) {\n\t\tsuper(document.body, 'player-editor-modal', {\n\t\t\tcloseButton: { fixed: true },\n\t\t\theader: false\n\t\t});\n\n\t\tthis.rootElem.id = 'playerEditorModal';\n\t\tthis.body.insertAdjacentHTML('beforeend', `\n\t\t\t<div class=\"player-editor within-raid-sim\"></div>\n\t\t`);\n\n\t\tconst editorRoot = this.rootElem.getElementsByClassName('player-editor')[0] as HTMLElement;\n\t\tspecSimFactories[player.spec]!(editorRoot, player);\n\t}\n}\n\nclass NewPlayerPicker extends Component {\n\treadonly raidPicker: RaidPicker;\n\n\tconstructor(parent: HTMLElement, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'new-player-picker-root');\n\t\tthis.raidPicker = raidPicker;\n\n\t\tgetEnumValues(Class).forEach(wowClass => {\n\t\t\tif (wowClass == Class.ClassUnknown) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingPresets = playerPresets.filter(preset => specToClass[preset.spec] == wowClass);\n\t\t\tif (matchingPresets.length == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst classPresetsContainer = document.createElement('div');\n\t\t\tclassPresetsContainer.classList.add('class-presets-container', `bg-${cssClassForClass(wowClass as Class)}-dampened`);\n\t\t\tthis.rootElem.appendChild(classPresetsContainer);\n\n\t\t\tmatchingPresets.forEach(matchingPreset => {\n\t\t\t\tconst presetElemFragment = document.createElement('fragment');\n\t\t\t\tpresetElemFragment.innerHTML = `\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"${matchingPreset.tooltip}\"\n\t\t\t\t\t\tdata-bs-html=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class=\"preset-picker-icon player-icon\" src=\"${matchingPreset.iconUrl}\"/>\n\t\t\t\t\t</a>\n\t\t\t\t`\n\t\t\t\tconst presetElem = presetElemFragment.children[0] as HTMLElement;\n\t\t\t\tclassPresetsContainer.appendChild(presetElem);\n\n\t\t\t\tTooltip.getOrCreateInstance(presetElem);\n\n\t\t\t\tpresetElem.ondragstart = event => {\n\t\t\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\t\tconst dragImage = new Image();\n\t\t\t\t\t\tdragImage.src = matchingPreset.iconUrl;\n\t\t\t\t\t\tevent.dataTransfer!.setDragImage(dragImage, 30, 30);\n\t\t\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", \"\");\n\t\t\t\t\t\tevent.dataTransfer!.dropEffect = 'copy';\n\n\t\t\t\t\t\tconst newPlayer = new Player(matchingPreset.spec, this.raidPicker.raid.sim);\n\t\t\t\t\t\tnewPlayer.applySharedDefaults(eventID);\n\t\t\t\t\t\tnewPlayer.setRace(eventID, matchingPreset.defaultFactionRaces[this.raidPicker.getCurrentFaction()]);\n\t\t\t\t\t\tnewPlayer.setTalentsString(eventID, matchingPreset.talents.talentsString);\n\t\t\t\t\t\tnewPlayer.setSpecOptions(eventID, matchingPreset.specOptions);\n\t\t\t\t\t\tnewPlayer.setConsumes(eventID, matchingPreset.consumes);\n\t\t\t\t\t\tnewPlayer.setName(eventID, matchingPreset.defaultName);\n\t\t\t\t\t\tnewPlayer.setProfession1(eventID, matchingPreset.otherDefaults?.profession1 || Profession.Engineering);\n\t\t\t\t\t\tnewPlayer.setProfession2(eventID, matchingPreset.otherDefaults?.profession2 || Profession.Jewelcrafting);\n\t\t\t\t\t\tnewPlayer.setDistanceFromTarget(eventID, matchingPreset.otherDefaults?.distanceFromTarget || 0);\n\n\t\t\t\t\t\t// Need to wait because the gear might not be loaded yet.\n\t\t\t\t\t\tthis.raidPicker.raid.sim.waitForInit().then(() => {\n\t\t\t\t\t\t\tnewPlayer.setGear(\n\t\t\t\t\t\t\t\teventID,\n\t\t\t\t\t\t\t\tthis.raidPicker.raid.sim.db.lookupEquipmentSpec(\n\t\t\t\t\t\t\t\t\tmatchingPreset.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]));\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.raidPicker.setDragPlayer(newPlayer, NEW_PLAYER, DragType.New);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction applyNewPlayerAssignments(eventID: EventID, newPlayer: Player<any>, raid: Raid) {\n\tif (isTankSpec(newPlayer.spec)) {\n\t\tconst tanks = raid.getTanks();\n\t\tconst emptyIdx = tanks.findIndex(tank => raid.getPlayerFromUnitReference(tank) == null);\n\t\tif (emptyIdx == -1) {\n\t\t\tif (tanks.length < 3) {\n\t\t\t\traid.setTanks(eventID, tanks.concat([newPlayer.makeUnitReference()]));\n\t\t\t}\n\t\t} else {\n\t\t\ttanks[emptyIdx] = newPlayer.makeUnitReference();\n\t\t\traid.setTanks(eventID, tanks);\n\t\t}\n\t}\n\n\t// Spec-specific assignments. For most cases, default to buffing self.\n\tif (newPlayer.spec == Spec.SpecBalanceDruid) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as BalanceDruidOptions;\n\t\tnewOptions.innervateTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import {\n\tClass,\n\tRaidBuffs,\n\tSpec,\n} from '../core/proto/common.js';\nimport { Component } from '../core/components/component.js';\nimport { Player } from \"../core/player.js\";\nimport { Raid } from \"../core/raid.js\";\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport {\n\tClassSpecs,\n\tSpecTalents,\n\tspecToClass,\n\tisTankSpec,\n\tisHealingSpec,\n\tisMeleeDpsSpec,\n\tisRangedDpsSpec,\n\ttextCssClassForClass,\n} from '../core/proto_utils/utils.js';\nimport { sum } from '../core/utils.js';\n\nimport { Hunter_Rotation_StingType as HunterStingType, Hunter_Options_PetType as HunterPetType } from '../core/proto/hunter.js';\nimport { PaladinAura } from '../core/proto/paladin.js';\nimport { EarthTotem, WaterTotem } from '../core/proto/shaman.js';\nimport { WarlockOptions_Summon as WarlockSummon } from '../core/proto/warlock.js';\nimport { WarriorShout } from '../core/proto/warrior.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { Tooltip } from 'bootstrap';\n\ninterface RaidStatsOptions {\n\tsections: Array<RaidStatsSectionOptions>,\n}\n\ninterface RaidStatsSectionOptions {\n\tlabel: string,\n\tcategories: Array<RaidStatsCategoryOptions>,\n}\n\ninterface RaidStatsCategoryOptions {\n\tlabel: string,\n\teffects: Array<RaidStatsEffectOptions>,\n}\n\ntype PlayerProvider = { class?: Class, condition: (player: Player<any>) => boolean };\ntype RaidProvider = (raid: Raid) => boolean;\n\ninterface RaidStatsEffectOptions {\n\tlabel: string,\n\tactionId?: ActionId,\n\tplayerData?: PlayerProvider,\n\traidData?: RaidProvider,\n}\n\nexport class RaidStats extends Component {\n\tprivate readonly categories: Array<RaidStatsCategory>;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-stats');\n\n\t\tlet categories: Array<RaidStatsCategory> = [];\n\t\tRAID_STATS_OPTIONS.sections.forEach(section => {\n\t\t\tconst sectionElem = document.createElement('div');\n\t\t\tsectionElem.classList.add('raid-stats-section');\n\t\t\tthis.rootElem.appendChild(sectionElem);\n\t\t\tsectionElem.innerHTML = `\n\t\t\t\t<div class=\"raid-stats-section-header\">\n\t\t\t\t\t<label class=\"raid-stats-section-label form-label\">${section.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"raid-stats-section-content\"></div>\n\t\t\t`;\n\t\t\tconst contentElem = sectionElem.getElementsByClassName('raid-stats-section-content')[0] as HTMLDivElement;\n\n\t\t\tsection.categories.forEach(categoryOptions => {\n\t\t\t\tcategories.push(new RaidStatsCategory(contentElem, raidSimUI, categoryOptions));\n\t\t\t});\n\t\t});\n\t\tthis.categories = categories;\n\n\t\traidSimUI.changeEmitter.on(_ => this.categories.forEach(c => c.update()));\n\t}\n}\n\nclass RaidStatsCategory extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsCategoryOptions;\n\tprivate readonly effects: Array<RaidStatsEffect>;\n\tprivate readonly counterElem: HTMLElement;\n\tprivate readonly tooltipElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsCategoryOptions) {\n\t\tsuper(parent, 'raid-stats-category-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a href=\"javascript:void(0)\" role=\"button\" class=\"raid-stats-category\">\n\t\t\t\t<span class=\"raid-stats-category-counter\"></span>\n\t\t\t\t<span class=\"raid-stats-category-label\">${options.label}</span>\n\t\t\t</a>\n\t\t`;\n\n\t\tthis.counterElem = this.rootElem.querySelector('.raid-stats-category-counter') as HTMLElement;\n\t\tthis.tooltipElem = document.createElement('div');\n\t\tthis.tooltipElem.innerHTML = `\n\t\t\t<label class=\"raid-stats-category-label\">${options.label}</label>\n\t\t`\n\n\t\tthis.effects = options.effects.map(opt => new RaidStatsEffect(this.tooltipElem, raidSimUI, opt));\n\n\t\tif (options.effects.length != 1 || options.effects[0].playerData?.class) {\n\t\t\tconst statsLink = this.rootElem.querySelector('.raid-stats-category') as HTMLElement;\n\n\t\t\t// Using the title option here because outerHTML sanitizes and filters out the img src options\n\t\t\tTooltip.getOrCreateInstance(statsLink, {\n\t\t\t\tcustomClass: 'raid-stats-category-tooltip',\n\t\t\t\thtml: true,\n\t\t\t\tplacement: 'right',\n\t\t\t\ttitle: this.tooltipElem,\n\t\t\t})\n\t\t}\n\t}\n\n\tupdate() {\n\t\tthis.effects.forEach(effect => effect.update());\n\n\t\tconst total = sum(this.effects.map(effect => effect.count));\n\t\tthis.counterElem.textContent = String(total);\n\n\t\tconst statsLink = this.rootElem.querySelector('.raid-stats-category') as HTMLElement;\n\n\t\tif (total == 0) {\n\t\t\tstatsLink?.classList.remove('active');\n\t\t} else {\n\t\t\tstatsLink?.classList.add('active');\n\t\t}\n\t}\n}\n\nclass RaidStatsEffect extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsEffectOptions;\n\tprivate readonly counterElem: HTMLElement;\n\n\tcurPlayers: Array<Player<any>>;\n\tcount: number;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsEffectOptions) {\n\t\tsuper(parent, 'raid-stats-effect');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.curPlayers = [];\n\t\tthis.count = 0;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<span class=\"raid-stats-effect-counter\"></span>\n\t\t\t<img class=\"raid-stats-effect-icon\"></img>\n\t\t\t<span class=\"raid-stats-effect-label\">${options.label}</span>\n\t\t`;\n\t\tthis.counterElem = this.rootElem.querySelector('.raid-stats-effect-counter') as HTMLElement;\n\n\t\tif (this.options.playerData?.class) {\n\t\t\tconst labelElem = this.rootElem.querySelector('.raid-stats-effect-label') as HTMLElement;\n\t\t\tconst playerCssClass = textCssClassForClass(this.options.playerData.class);\n\t\t\tlabelElem.classList.add(playerCssClass);\n\t\t}\n\n\t\tconst iconElem = this.rootElem.querySelector('.raid-stats-effect-icon') as HTMLImageElement;\n\t\tif (options.actionId) {\n\t\t\toptions.actionId.fill().then(actionId => iconElem.src = actionId.iconUrl);\n\t\t} else {\n\t\t\ticonElem.remove();\n\t\t}\n\t}\n\n\tupdate() {\n\t\tif (this.options.playerData) {\n\t\t\tthis.curPlayers = this.raidSimUI.getActivePlayers().filter(p => this.options.playerData!.condition(p));\n\t\t}\n\n\t\tconst raidData = this.options.raidData && this.options.raidData(this.raidSimUI.sim.raid);\n\n\t\tthis.count = this.curPlayers.length + (raidData ? 1 : 0);\n\t\tthis.counterElem.textContent = String(this.count);\n\t\tif (this.count == 0) {\n\t\t\tthis.rootElem.classList.remove('active');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('active');\n\t\t}\n\t}\n}\n\nfunction negateIf(val: boolean, cond: boolean): boolean {\n\treturn cond ? !val : val;\n}\n\nfunction playerClass<T extends Class>(clazz: T, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalentInternal<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, negateTalent: boolean, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz)\n\t\t\t\t&& negateIf(Boolean((player.getTalents() as any)[talentName]), negateTalent)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalent<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, false, extraCondition);\n}\nfunction playerClassAndMissingTalent<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, true, extraCondition);\n}\nfunction playerSpecAndTalentInternal<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, negateTalent: boolean, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: specToClass[spec],\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isSpec(spec)\n\t\t\t\t&& negateIf(Boolean((player.getTalents() as any)[talentName]), negateTalent)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerSpecAndTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, false, extraCondition);\n}\nfunction playerSpecAndMissingTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, true, extraCondition);\n}\n\nfunction raidBuff(buffName: keyof RaidBuffs): RaidProvider {\n\treturn (raid: Raid): boolean => {\n\t\treturn Boolean(raid.getBuffs()[buffName]);\n\t};\n}\n\nconst RAID_STATS_OPTIONS: RaidStatsOptions = {\n\tsections: [\n\t\t{\n\t\t\tlabel: 'Roles',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Tanks',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Tanks',\n\t\t\t\t\t\t\tplayerData: { condition: player => isTankSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Healers',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Healers',\n\t\t\t\t\t\t\tplayerData: { condition: player => isHealingSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Melee',\n\t\t\t\t\t\t\tplayerData: { condition: player => isMeleeDpsSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Ranged',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Ranged',\n\t\t\t\t\t\t\tplayerData: { condition: player => isRangedDpsSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'Buffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(2825),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stats',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Gift of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(17051),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'improvedMarkOfTheWild'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Gift of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48470),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassDruid, 'improvedMarkOfTheWild'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stats %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Kings',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(25898),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Armor',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Devotion Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20140),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'improvedDevotionAura', player => player.getSpecOptions().aura == PaladinAura.DevotionAura),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Devotion Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48942),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPaladin, 'improvedDevotionAura', player => player.getSpecOptions().aura == PaladinAura.DevotionAura),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Stoneskin Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16293),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'guardianTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StoneskinTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Stoneskin Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58753),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'guardianTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StoneskinTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Protection',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(43468),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfProtection'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stamina',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Power Word Fortitude',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(14767),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'improvedPowerWordFortitude'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Power Word Fortitude',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48161),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPriest, 'improvedPowerWordFortitude'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Stamina',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(37094),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfStamina'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Str + Agi',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Strength of Earth Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58643),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'enhancingTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StrengthOfEarthTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Strength',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(43466),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfStrength'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Agility',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(43464),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfAgility'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Intellect',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Arcane Brilliance',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(43002),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassMage),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Intellect',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(37092),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfIntellect'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spirit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Divine Spirit',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48073),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPriest),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Spirit',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(10306),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfSpirit'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Pwr',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Blessing of Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20045),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48934),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Battle Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12861),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedBattleShout', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutBattle),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Battle Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47436),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedBattleShout', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutBattle),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Pwr %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Trueshot Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(19506),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'trueshotAura'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Mit %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing Of Sanctuary',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(25899),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'MP5',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Blessing of Wisdom',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20245),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'improvedBlessingOfWisdom'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Wisdom',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48938),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPaladin, 'improvedBlessingOfWisdom'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Mana Spring Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16206),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'restorativeTotems', player => player.getSpecOptions().totems?.water == WaterTotem.ManaSpringTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mana Spring Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58774),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'restorativeTotems', player => player.getSpecOptions().totems?.water == WaterTotem.ManaSpringTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Leader of the Pack',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(17007),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'leaderOfThePack'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee Haste',\n\t\t\t\t\teffects: [\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Moonkin Form',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(24907),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'moonkinForm'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Health',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Imp',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(18696),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedImp', player => player.getSpecOptions().summon == WarlockSummon.Imp),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blood Pact',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47982),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedImp', player => player.getSpecOptions().summon == WarlockSummon.Imp),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'External Buffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Innervate',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Innervate',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29166),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(10060),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'powerInfusion'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'DPS Debuffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Major ArP',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Sunder Armor',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(7386),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarrior),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Expose Armor',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(8647),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Minor ArP',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Faerie Fire',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(770),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => player.spec != Spec.SpecRestorationDruid),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \tlabel: 'Curse of Weakness',\n\t\t\t\t\t\t// \tactionId: ActionId.fromSpellId(50511),\n\t\t\t\t\t\t// \tplayerData: playerClass(Class.ClassWarlock, player => player.getSimpleRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t\t// },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Spore Cloud',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53598),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Bat),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Bleed',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mangle',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16862),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => [Spec.SpecFeralDruid, Spec.SpecFeralTankDruid].includes(player.spec)),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'Mitigation Debuffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Pwr',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Vindication',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(26016),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'vindication', player => [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin].includes(player.spec)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Demoralizing Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12879),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedDemoralizingShout'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(11556),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedDemoralizingShout'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Demoralizing Roar',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16862),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecFeralTankDruid, 'feralAggression', player => player.getSimpleRotation().maintainDemoralizingRoar),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Roar',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(9898),\n\t\t\t\t\t\t\tplayerData: playerSpecAndMissingTalent(Spec.SpecFeralTankDruid, 'feralAggression', player => player.getSimpleRotation().maintainDemoralizingRoar),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \tlabel: 'Improved Curse of Weakness',\n\t\t\t\t\t\t// \tactionId: ActionId.fromSpellId(18180),\n\t\t\t\t\t\t// \tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedCurseOfWeakness', player => player.getSimpleRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t\t// },\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \tlabel: 'Curse of Weakness',\n\t\t\t\t\t\t// \tactionId: ActionId.fromSpellId(50511),\n\t\t\t\t\t\t// \tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedCurseOfWeakness', player => player.getSimpleRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t\t// },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Screech',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(55487),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.CarrionBird),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Speed',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Thunder Clap',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12666),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedThunderClap'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Thunder Clap',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47502),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedThunderClap'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Miss',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Insect Swarm',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(24977),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'insectSwarm'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scorpid Sting',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(3043),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSimpleRotation().sting == HunterStingType.ScorpidSting),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t]\n};\n","import { RaidPicker } from \"./raid_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\nimport { RaidStats } from \"./raid_stats\";\nimport { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\nimport { BlessingsAssignments, SavedRaid } from \"../core/proto/ui\";\nimport { EventID, TypedEvent } from \"../core/typed_event\";\nimport { Raid as RaidProto } from \"../core/proto/api\";\n\nexport class RaidTab extends SimTab {\n\tprotected simUI: RaidSimUI;\n\n\treadonly leftPanel: HTMLElement;\n\treadonly rightPanel: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parentElem, simUI, { identifier: 'raid-tab', title: 'Raid' });\n\t\tthis.simUI = simUI;\n\n\t\tthis.rootElem.classList.add('active', 'show')\n\n\t\tthis.leftPanel = document.createElement('div');\n\t\tthis.leftPanel.classList.add('raid-tab-left', 'tab-panel-left');\n\n\t\tthis.rightPanel = document.createElement('div');\n\t\tthis.rightPanel.classList.add('raid-tab-right', 'tab-panel-right');\n\n\t\tthis.contentContainer.appendChild(this.leftPanel);\n\t\tthis.contentContainer.appendChild(this.rightPanel);\n\n\t\tthis.buildTabContent();\n\t}\n\n\tprotected buildTabContent() {\n\t\tthis.simUI.raidPicker = new RaidPicker(this.leftPanel, this.simUI);\n\t\tnew RaidStats(this.leftPanel, this.simUI);\n\n\t\tconst savedRaidManager = new SavedDataManager<RaidSimUI, SavedRaid>(this.rightPanel, this.simUI, {\n\t\t\tlabel: 'Raid',\n\t\t\theader: { title: 'Saved Raid Groups' },\n\t\t\tstorageKey: this.simUI.getSavedRaidStorageKey(),\n\t\t\tgetData: (raidSimUI: RaidSimUI) => SavedRaid.create({\n\t\t\t\traid: this.simUI.sim.raid.toProto(),\n\t\t\t\tblessings: this.simUI.blessingsPicker!.getAssignments(),\n\t\t\t\tfaction: this.simUI.sim.getFaction(),\n\t\t\t\tphase: this.simUI.sim.getPhase(),\n\t\t\t}),\n\t\t\tsetData: (eventID: EventID, raidSimUI: RaidSimUI, newRaid: SavedRaid) => {\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tthis.simUI.sim.raid.fromProto(eventID, newRaid.raid || RaidProto.create());\n\t\t\t\t\tthis.simUI.blessingsPicker!.setAssignments(eventID, newRaid.blessings || BlessingsAssignments.create());\n\t\t\t\t\tif (newRaid.faction) this.simUI.sim.setFaction(eventID, newRaid.faction);\n\t\t\t\t\tif (newRaid.phase) this.simUI.sim.setPhase(eventID, newRaid.phase);\n\t\t\t\t});\n\t\t\t},\n\t\t\tchangeEmitters: [this.simUI.changeEmitter, this.simUI.sim.changeEmitter],\n\t\t\tequals: (a: SavedRaid, b: SavedRaid) => {\n\t\t\t\treturn SavedRaid.equals(a, b);\n\t\t\t},\n\t\t\ttoJson: (a: SavedRaid) => SavedRaid.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedRaid.fromJson(obj),\n\t\t}\n\t\t);\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedRaidManager.loadUserData();\n\t\t});\n\t}\n}\n","import { Input, InputConfig } from '../components/input.js';\nimport { Player } from '../player.js';\nimport { Raid } from '../raid.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { UnitReference } from '../proto/common.js';\nimport { emptyUnitReference, cssClassForClass } from '../proto_utils/utils.js';\n\nexport interface UnitReferencePickerConfig<ModObject> extends InputConfig<ModObject, UnitReference> {\n\tnoTargetLabel: string,\n\tcompChangeEmitter: TypedEvent<void>,\n}\n\ninterface OptionElemOptions {\n\tisDropdown?: boolean,\n\tplayer: Player<any> | null,\n}\n\n// Dropdown menu for selecting a player.\nexport class UnitReferencePicker<ModObject> extends Input<ModObject, UnitReference> {\n\tprivate readonly config: UnitReferencePickerConfig<ModObject>;\n\tprivate readonly raid: Raid;\n\n\tprivate curPlayer: Player<any> | null;\n\tprivate curUnitReference: UnitReference;\n\n\tprivate currentOptions: Array<OptionElemOptions>;\n\n\tprivate readonly buttonElem: HTMLElement;\n\tprivate readonly dropdownElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raid: Raid, modObj: ModObject, config: UnitReferencePickerConfig<ModObject>) {\n\t\tsuper(parent, 'raid-target-picker-root', modObj, config);\n\t\tthis.rootElem.classList.add('dropdown');\n\t\tthis.config = config;\n\t\tthis.raid = raid;\n\t\tthis.curPlayer = this.raid.getPlayerFromUnitReference(config.getValue(modObj));\n\t\tthis.curUnitReference = this.getInputValue();\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a\n\t\t\t\tclass=\"raid-target-picker-button\"\n\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\trole=\"button\"\n\t\t\t\tdata-bs-toggle=\"dropdown\"\n\t\t\t></a>\n\t\t\t<div class=\"dropdown-menu\"></div>\n    `;\n\n\t\tthis.buttonElem = this.rootElem.querySelector('.raid-target-picker-button') as HTMLElement;\n\t\tthis.dropdownElem = this.rootElem.querySelector('.dropdown-menu') as HTMLElement;\n\n\t\tthis.buttonElem.addEventListener('click', event => event.preventDefault());\n\n\t\tthis.currentOptions = [];\n\t\tthis.updateOptions(TypedEvent.nextEventID());\n\t\tconfig.compChangeEmitter.on(eventID => this.updateOptions(eventID));\n\n\t\tthis.init();\n\t}\n\n\tprivate makeTargetOptions(): Array<OptionElemOptions> {\n\t\tconst unassignedOption = { player: null, isDropdown: true }\n\t\tconst playerOptions = this.raid.getPlayers().filter(player => player != null).map(player => {\n\t\t\treturn { player: player, isDropdown: true }\n\t\t});\n\n\t\treturn [unassignedOption, ...playerOptions]\n\t}\n\n\tprivate updateOptions(eventID: EventID) {\n\t\tthis.currentOptions = this.makeTargetOptions();\n\n\t\tthis.dropdownElem.innerHTML = '';\n\t\tthis.currentOptions.forEach(option => this.dropdownElem.appendChild(this.makeOption(option)));\n\n\t\tconst prevUnitReference = this.curUnitReference;\n\t\tthis.curUnitReference = this.getInputValue();\n\t\tif (!UnitReference.equals(prevUnitReference, this.curUnitReference)) {\n\t\t\tthis.inputChanged(eventID);\n\t\t} else {\n\t\t\tthis.setInputValue(this.curUnitReference);\n\t\t}\n\t}\n\n\tprivate makeOption(data: OptionElemOptions): HTMLElement {\n\t\tconst option = UnitReferencePicker.makeOptionElem(data);\n\n\t\toption.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.curPlayer = data.player;\n\t\t\tthis.curUnitReference = this.getInputValue();\n\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\n\t\treturn option;\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.buttonElem;\n\t}\n\n\tgetInputValue(): UnitReference {\n\t\tif (this.curPlayer) {\n\t\t\treturn this.curPlayer.makeUnitReference();\n\t\t} else {\n\t\t\treturn emptyUnitReference();\n\t\t}\n\t}\n\n\tsetInputValue(newValue: UnitReference) {\n\t\tthis.curUnitReference = UnitReference.clone(newValue);\n\t\tthis.curPlayer = this.raid.getPlayerFromUnitReference(this.curUnitReference);\n\n\t\tconst optionData = this.currentOptions.find(optionData => optionData.player == this.curPlayer);\n\n\t\tif (optionData)\n\t\t\tthis.buttonElem.innerHTML = UnitReferencePicker.makeOptionElem({ player: optionData.player }).outerHTML;\n\t}\n\n\tstatic makeOptionElem(data: OptionElemOptions): HTMLElement {\n\t\tconst classCssClass = data.player ? cssClassForClass(data.player.getClass()) : '';\n\t\tlet playerFragment = document.createElement('fragment');\n\n\t\tplayerFragment.innerHTML = `\n\t\t\t<div class=\"player ${classCssClass ? `bg-${classCssClass}-dampened` : ''}\">\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t${data.player ? `<img class=\"player-icon\" src=\"${data.player.getSpecIcon()}\" draggable=\"false\"/>` : ''}\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<span class=\"player-name ${classCssClass ? `text-${classCssClass}` : ''}\">\n\t\t\t\t\t\t\t${data.player ? data.player.getName() : 'Unassigned'}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`\n\n\t\tif (data.isDropdown) {\n\t\t\tplayerFragment.innerHTML = `\n\t\t\t\t<a class=\"dropdown-option\" href=\"javascript:void(0) role=\"button\">${playerFragment.innerHTML}</a>\n\t\t\t`\n\t\t}\n\n\t\treturn playerFragment.children[0] as HTMLElement;\n\t}\n}\n","import { Component } from '../core/components/component.js';\nimport { UnitReferencePicker } from '../core/components/raid_target_picker.js';\n\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport { Class, UnitReference, Spec } from '../core/proto/common.js';\nimport { emptyUnitReference } from '../core/proto_utils/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { PriestTalents } from 'ui/core/proto/priest.js';\n\nexport class AssignmentsPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly innervatesPicker: InnervatesPicker;\n\tprivate readonly powerInfusionsPicker: PowerInfusionsPicker;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assignments-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tthis.innervatesPicker = new InnervatesPicker(this.rootElem, raidSimUI);\n\t\tthis.powerInfusionsPicker = new PowerInfusionsPicker(this.rootElem, raidSimUI);\n\t}\n}\n\ninterface AssignmentTargetPicker {\n\tplayer: Player<any>,\n\ttargetPicker: UnitReferencePicker<Player<any>>,\n\ttargetPlayer: Player<any> | null;\n};\n\nabstract class AssignedBuffPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly playersContainer: HTMLElement;\n\n\tprivate targetPickers: Array<AssignmentTargetPicker>;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assigned-buff-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.targetPickers = [];\n\n\t\tthis.playersContainer = document.createElement('div');\n\t\tthis.playersContainer.classList.add('assigned-buff-container');\n\t\tthis.rootElem.appendChild(this.playersContainer);\n\n\t\tthis.raidSimUI.changeEmitter.on(() => this.update());\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tthis.playersContainer.innerHTML = `\n\t\t\t<label class=\"assignmented-buff-label form-label\">${this.getTitle()}</label>\n\t\t`\n\n\t\tconst sourcePlayers = this.getSourcePlayers();\n\t\tif (sourcePlayers.length == 0)\n\t\t\tthis.rootElem.classList.add('hide');\n\t\telse\n\t\t\tthis.rootElem.classList.remove('hide');\n\n\t\tthis.targetPickers = sourcePlayers.map((sourcePlayer) => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('assigned-buff-player', 'input-inline');\n\t\t\tthis.playersContainer.appendChild(row);\n\n\t\t\tlet sourceElem = document.createElement('div');\n\t\t\tsourceElem.classList.add('raid-target-picker-root');\n\t\t\tsourceElem.appendChild(\n\t\t\t\tUnitReferencePicker.makeOptionElem({ player: sourcePlayer, isDropdown: false })\n\t\t\t);\n\t\t\trow.appendChild(sourceElem);\n\n\t\t\tconst arrow = document.createElement('i');\n\t\t\tarrow.classList.add('assigned-buff-arrow', 'fa', 'fa-arrow-right');\n\t\t\trow.appendChild(arrow);\n\n\t\t\tconst raidTargetPicker: UnitReferencePicker<Player<any>> | null = new UnitReferencePicker<Player<any>>(row, this.raidSimUI.sim.raid, sourcePlayer, {\n\t\t\t\textraCssClasses: ['assigned-buff-target-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: this.raidSimUI.sim.raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (player: Player<any>) => player.specOptionsChangeEmitter,\n\t\t\t\tgetValue: (player: Player<any>) => this.getPlayerValue(player),\n\t\t\t\tsetValue: (eventID: EventID, player: Player<any>, newValue: UnitReference) => this.setPlayerValue(eventID, player, newValue),\n\t\t\t});\n\n\t\t\tconst targetPickerData = {\n\t\t\t\tplayer: sourcePlayer,\n\t\t\t\ttargetPicker: raidTargetPicker!,\n\t\t\t\ttargetPlayer: this.raidSimUI.sim.raid.getPlayerFromUnitReference(raidTargetPicker!.getInputValue()),\n\t\t\t};\n\n\t\t\traidTargetPicker!.changeEmitter.on(_eventID => {\n\t\t\t\ttargetPickerData.targetPlayer = this.raidSimUI.sim.raid.getPlayerFromUnitReference(raidTargetPicker!.getInputValue());\n\t\t\t});\n\n\t\t\treturn targetPickerData;\n\t\t});\n\t}\n\n\tabstract getTitle(): string;\n\tabstract getSourcePlayers(): Array<Player<any>>;\n\n\tabstract getPlayerValue(player: Player<any>): UnitReference;\n\tabstract setPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference): void;\n}\n\nclass InnervatesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Innervate';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDruid));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecBalanceDruid>).getSpecOptions().innervateTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecBalanceDruid>).getSpecOptions();\n\t\tnewOptions.innervateTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass PowerInfusionsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Power Infusion';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassPriest) && (player.getTalents() as PriestTalents).powerInfusion);\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecShadowPriest>).getSpecOptions().powerInfusionTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecShadowPriest>).getSpecOptions();\n\t\tnewOptions.powerInfusionTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}","import { Component } from '../core/components/component';\nimport { IconEnumPicker } from '../core/components/icon_enum_picker';\n\nimport { EventID, TypedEvent } from '../core/typed_event';\n\nimport { Class, Spec } from '../core/proto/common';\nimport { Blessings } from '../core/proto/paladin';\nimport { BlessingsAssignments } from '../core/proto/ui';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport {\n\tmakeDefaultBlessings,\n\tclassColors,\n\tnaturalSpecOrder,\n\tspecNames,\n\ttitleIcons,\n} from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\nimport { implementedSpecs } from './presets';\nimport { Tooltip } from 'bootstrap';\n\nconst MAX_PALADINS = 4;\n\nexport class BlessingsPicker extends Component {\n\treadonly simUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly pickers: Array<Array<IconEnumPicker<this, Blessings>>> = [];\n\n\tprivate assignments: BlessingsAssignments;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'blessings-picker-root');\n\t\tthis.simUI = raidSimUI;\n\t\tthis.assignments = BlessingsAssignments.clone(makeDefaultBlessings(4));\n\n\t\tconst specs = naturalSpecOrder\n\t\t\t.filter(spec => implementedSpecs.includes(spec))\n\t\tconst paladinIndexes = [...Array(MAX_PALADINS).keys()];\n\n\t\tspecs.map(spec => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('blessings-picker-row');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\trow.append(this.buildSpecIcon(spec));\n\n\t\t\tconst container = document.createElement('div');\n\t\t\tcontainer.classList.add('blessings-picker-container');\n\t\t\trow.appendChild(container);\n\n\t\t\tpaladinIndexes.forEach(paladinIdx => {\n\t\t\t\tif (!this.pickers[paladinIdx])\n\t\t\t\t\tthis.pickers.push([]);\n\n\t\t\t\tconst blessingPicker = new IconEnumPicker(container, this, {\n\t\t\t\t\textraCssClasses: ['blessing-picker'],\n\t\t\t\t\tnumColumns: 1,\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ color: classColors[Class.ClassPaladin], value: Blessings.BlessingUnknown },\n\t\t\t\t\t\t{ actionId: () => ActionId.fromSpellId(25898), value: Blessings.BlessingOfKings },\n\t\t\t\t\t\t{ actionId: () => ActionId.fromSpellId(48934), value: Blessings.BlessingOfMight },\n\t\t\t\t\t\t{ actionId: () => ActionId.fromSpellId(48938), value: Blessings.BlessingOfWisdom },\n\t\t\t\t\t\t{ actionId: () => ActionId.fromSpellId(25899), value: Blessings.BlessingOfSanctuary },\n\t\t\t\t\t],\n\t\t\t\t\tequals: (a: Blessings, b: Blessings) => a == b,\n\t\t\t\t\tzeroValue: Blessings.BlessingUnknown,\n\t\t\t\t\tenableWhen: (_picker: BlessingsPicker) => {\n\t\t\t\t\t\tconst numPaladins = Math.min(this.simUI.getClassCount(Class.ClassPaladin), MAX_PALADINS);\n\t\t\t\t\t\treturn paladinIdx < numPaladins;\n\t\t\t\t\t},\n\t\t\t\t\tchangedEvent: (picker: BlessingsPicker) => picker.changeEmitter,\n\t\t\t\t\tgetValue: (picker: BlessingsPicker) => picker.assignments.paladins[paladinIdx]?.blessings[spec] || Blessings.BlessingUnknown,\n\t\t\t\t\tsetValue: (eventID: EventID, picker: BlessingsPicker, newValue: number) => {\n\t\t\t\t\t\tconst currentValue = picker.assignments.paladins[paladinIdx].blessings[spec];\n\t\t\t\t\t\tif (currentValue != newValue) {\n\t\t\t\t\t\t\tpicker.assignments.paladins[paladinIdx].blessings[spec] = newValue;\n\t\t\t\t\t\t\tthis.changeEmitter.emit(eventID);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.pickers[paladinIdx].push(blessingPicker);\n\t\t\t});\n\n\t\t\treturn row;\n\t\t});\n\n\t\tthis.updatePickers()\n\t\tthis.simUI.compChangeEmitter.on(_eventID => this.updatePickers());\n\t}\n\n\tprivate updatePickers() {\n\t\tfor (let i = 0; i < MAX_PALADINS; i++) {\n\t\t\tthis.pickers[i].forEach(picker => picker.update());\n\t\t}\n\t}\n\n\tprivate buildSpecIcon(spec: Spec): HTMLElement {\n\t\tlet fragment = document.createElement('fragment');\n\t\tfragment.innerHTML = `\n\t\t\t<div class=\"blessings-picker-spec\">\n\t\t\t\t<img\n\t\t\t\t\tsrc=\"${titleIcons[spec]}\"\n\t\t\t\t\tclass=\"blessings-spec-icon\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst icon = fragment.querySelector('.blessings-spec-icon') as HTMLElement;\n\t\tTooltip.getOrCreateInstance(icon, { title: specNames[spec]});\n\n\t\treturn fragment.children[0] as HTMLElement;\n\t}\n\n\tgetAssignments(): BlessingsAssignments {\n\t\t// Defensive copy.\n\t\treturn BlessingsAssignments.clone(this.assignments);\n\t}\n\n\tsetAssignments(eventID: EventID, newAssignments: BlessingsAssignments) {\n\t\tthis.assignments = BlessingsAssignments.clone(newAssignments);\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { UnitReferencePicker } from '../core/components/raid_target_picker';\n\nimport { Raid } from '../core/raid';\nimport { EventID } from '../core/typed_event';\n\nimport { UnitReference } from '../core/proto/common';\nimport { emptyUnitReference } from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\n\nconst MAX_TANKS = 4;\n\nexport class TanksPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'tanks-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tconst raid = this.raidSimUI.sim.raid;\n\n\t\tfor (let i = 0; i < MAX_TANKS; i++) {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('tank-picker-row', 'input-inline');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\tconst labelElem = document.createElement('label');\n\t\t\tlabelElem.textContent = i == 0 ? 'Main Tank' : `Tank ${i + 1}`;\n\t\t\tlabelElem.classList.add('tank-picker-label', 'form-label');\n\t\t\trow.appendChild(labelElem);\n\n\t\t\tnew UnitReferencePicker<Raid>(row, raid, raid, {\n\t\t\t\textraCssClasses: ['tank-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (raid: Raid) => raid.tanksChangeEmitter,\n\t\t\t\tgetValue: (raid: Raid) => raid.getTanks()[i] || emptyUnitReference(),\n\t\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: UnitReference) => {\n\t\t\t\t\tconst tanks = raid.getTanks();\n\t\t\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\t\t\tif (!tanks[j]) {\n\t\t\t\t\t\t\ttanks.push(emptyUnitReference());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttanks[i] = newValue;\n\t\t\t\t\traid.setTanks(eventID, tanks);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n}\n","import { ContentBlock } from \"../core/components/content_block\";\nimport { EncounterPicker } from \"../core/components/encounter_picker\";\nimport { IconPicker } from \"../core/components/icon_picker\";\nimport { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\n\nimport { Encounter } from \"../core/encounter\";\nimport { Raid } from \"../core/raid\";\nimport { EventID } from \"../core/typed_event\";\n\nimport { RaidBuffs } from \"../core/proto/common\";\nimport { SavedEncounter } from \"../core/proto/ui\";\nimport { ActionId } from \"../core/proto_utils/action_id\";\n\nimport { AssignmentsPicker } from \"./assignments_picker\";\nimport { BlessingsPicker } from \"./blessings_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\nimport { TanksPicker } from \"./tanks_picker\";\n\nimport * as Tooltips from \"../core/constants/tooltips.js\";\n\nexport class SettingsTab extends SimTab {\n\tprotected simUI: RaidSimUI;\n\n\treadonly leftPanel: HTMLElement;\n\treadonly rightPanel: HTMLElement;\n\n\treadonly column1: HTMLElement = this.buildColumn(1, 'raid-settings-col');\n\treadonly column2: HTMLElement = this.buildColumn(2, 'raid-settings-col');\n\treadonly column3: HTMLElement = this.buildColumn(3, 'raid-settings-col');\n\n\tconstructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parentElem, simUI, { identifier: 'raid-settings-tab', title: 'Settings' });\n\t\tthis.simUI = simUI;\n\n\t\tthis.leftPanel = document.createElement('div');\n\t\tthis.leftPanel.classList.add('raid-settings-tab-left', 'tab-panel-left');\n\n\t\tthis.leftPanel.appendChild(this.column1);\n\t\tthis.leftPanel.appendChild(this.column2);\n\t\tthis.leftPanel.appendChild(this.column3);\n\n\t\tthis.rightPanel = document.createElement('div');\n\t\tthis.rightPanel.classList.add('raid-settings-tab-right', 'tab-panel-right', 'within-raid-sim-hide');\n\n\t\tthis.contentContainer.appendChild(this.leftPanel);\n\t\tthis.contentContainer.appendChild(this.rightPanel);\n\n\t\tthis.buildTabContent();\n\t}\n\n\tprotected buildTabContent() {\n\t\tthis.buildEncounterSettings();\n\t\tthis.buildConsumesSettings();\n\t\tthis.buildOtherSettings();\n\n\t\tthis.buildTankSettings();\n\t\tthis.buildAssignmentSettings();\n\n\t\tthis.buildBlessingsPicker();\n\t\tthis.buildSavedDataPickers();\n\t}\n\n\tprivate buildEncounterSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column1, 'encounter-settings', {\n\t\t\theader: { title: 'Encounter' }\n\t\t});\n\n\t\tnew EncounterPicker(contentBlock.bodyElement, this.simUI.sim.encounter, { showExecuteProportion: true }, this.simUI);\n\t}\n\n\tprivate buildConsumesSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column1, 'consumes-settings', {\n\t\t\theader: { title: 'Consumables' }\n\t\t});\n\n\t\tlet container = document.createElement('div');\n\t\tcontainer.classList.add('consumes-container');\n\n\t\tcontentBlock.bodyElement.appendChild(container);\n\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37094), 'scrollOfStamina');\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43466), 'scrollOfStrength');\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43464), 'scrollOfAgility');\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37092), 'scrollOfIntellect');\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37098), 'scrollOfSpirit');\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43468), 'scrollOfProtection');\n\t}\n\n\tprivate buildOtherSettings() {\n\t\t// const raid = this.simUI.sim.raid;\n\t\t// const contentBlock = new ContentBlock(this.column1, 'other-settings', {\n\t\t//   header: {title: 'Other'}\n\t\t// });\n\n\t\t// new BooleanPicker(contentBlock.bodyElement, this.simUI.sim.raid, {\n\t\t// \tlabel: 'Stagger Stormstrikes',\n\t\t// \tlabelTooltip: 'When there are multiple Enhancement Shaman in the raid, causes them to coordinate their Stormstrike casts for optimal SS charge usage.',\n\t\t// \tchangedEvent: (raid: Raid) => raid.staggerStormstrikesChangeEmitter,\n\t\t// \tgetValue: (raid: Raid) => raid.getStaggerStormstrikes(),\n\t\t// \tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t// \t\traid.setStaggerStormstrikes(eventID, newValue);\n\t\t// \t},\n\t\t// });\n\t}\n\n\tprivate buildTankSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'tanks-settings', {\n\t\t\theader: { title: 'Tanks' }\n\t\t});\n\n\t\tnew TanksPicker(contentBlock.bodyElement, this.simUI);\n\t}\n\n\tprivate buildAssignmentSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'assignments-settings', {\n\t\t\theader: { title: 'External Buffs' }\n\t\t});\n\n\t\tnew AssignmentsPicker(contentBlock.bodyElement, this.simUI);\n\t}\n\n\tprivate buildBlessingsPicker() {\n\t\tconst contentBlock = new ContentBlock(this.column3, 'blessings-settings', {\n\t\t\theader: { title: 'Blessings', tooltip: Tooltips.BLESSINGS_SECTION }\n\t\t});\n\n\t\tthis.simUI.blessingsPicker = new BlessingsPicker(contentBlock.bodyElement, this.simUI);\n\t\tthis.simUI.blessingsPicker.changeEmitter.on(eventID => this.simUI.changeEmitter.emit(eventID));\n\t}\n\n\tprivate buildSavedDataPickers() {\n\t\tconst savedEncounterManager = new SavedDataManager<Encounter, SavedEncounter>(this.rightPanel, this.simUI.sim.encounter, {\n\t\t\tlabel: 'Encounter',\n\t\t\theader: { title: 'Saved Encounters' },\n\t\t\tstorageKey: this.simUI.getSavedEncounterStorageKey(),\n\t\t\tgetData: (encounter: Encounter) => SavedEncounter.create({ encounter: encounter.toProto() }),\n\t\t\tsetData: (eventID: EventID, encounter: Encounter, newEncounter: SavedEncounter) => encounter.fromProto(eventID, newEncounter.encounter!),\n\t\t\tchangeEmitters: [this.simUI.sim.encounter.changeEmitter],\n\t\t\tequals: (a: SavedEncounter, b: SavedEncounter) => SavedEncounter.equals(a, b),\n\t\t\ttoJson: (a: SavedEncounter) => SavedEncounter.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedEncounter.fromJson(obj),\n\t\t});\n\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedEncounterManager.loadUserData();\n\t\t});\n\t}\n\n\tprivate makeBooleanRaidIconBuffInput(parent: HTMLElement, actionId: ActionId, field: keyof RaidBuffs): IconPicker<Raid, boolean> {\n\t\tconst raid = this.simUI.sim.raid;\n\n\t\treturn new IconPicker<Raid, boolean>(parent, raid, {\n\t\t\tactionId: () => actionId,\n\t\t\tstates: 2,\n\t\t\tchangedEvent: (raid: Raid) => raid.buffsChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getBuffs()[field] as unknown as boolean,\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t\t\tconst newBuffs = raid.getBuffs();\n\t\t\t\t(newBuffs[field] as unknown as boolean) = newValue;\n\t\t\t\traid.setBuffs(eventID, newBuffs);\n\t\t\t},\n\t\t});\n\t}\n}\n","import { Exporter } from '../core/components/exporters';\nimport { Importer } from '../core/components/importers';\nimport { RaidSimSettings } from '../core/proto/ui';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { Party as PartyProto, Player as PlayerProto, Raid as RaidProto } from '../core/proto/api';\nimport {\n\tClass,\n\tEncounter as EncounterProto,\n\tEquipmentSpec,\n\tFaction,\n\tItemSpec,\n\tProfession,\n\tRace,\n\tUnitReference,\n\tSpec,\n\tTarget as TargetProto,\n\tUnitReference_Type,\n} from '../core/proto/common';\nimport { professionNames, raceNames } from '../core/proto_utils/names';\nimport {\n\tDruidSpecs,\n\tPriestSpecs,\n\tRogueSpecs,\n\tSpecOptions,\n\tgetTalentTreePoints,\n\tmakeDefaultBlessings,\n\traceToFaction,\n\tisTankSpec,\n\tplayerToSpec,\n} from '../core/proto_utils/utils';\nimport { MAX_NUM_PARTIES } from '../core/raid';\nimport { Player } from '../core/player';\nimport { Encounter } from '../core/encounter';\nimport { bucket, distinct} from '../core/utils';\n\nimport { playerPresets } from './presets';\nimport { RaidSimUI } from './raid_sim_ui';\nimport { RaidSimPreset } from 'ui/core/individual_sim_ui';\n\nexport class RaidJsonImporter extends Importer {\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'JSON Import', true);\n\t\tthis.simUI = simUI;\n\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tonImport(data: string) {\n\t\tconst settings = RaidSimSettings.fromJsonString(data, { ignoreUnknownFields: true });\n\t\tthis.simUI.fromProto(TypedEvent.nextEventID(), settings);\n\t\tthis.close();\n\t}\n}\n\nexport class RaidJsonExporter extends Exporter {\n\tprivate readonly simUI: RaidSimUI;\n\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, {title: 'JSON Export', allowDownload: true});\n\t\tthis.simUI = simUI;\n\t\tthis.init();\n\t}\n\n\tgetData(): string {\n\t\treturn JSON.stringify(RaidSimSettings.toJson(this.simUI.toProto()), null, 2);\n\t}\n}\n\nexport class RaidWCLImporter extends Importer {\n\n\tprivate queryCounter: number = 0;\n\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'WCL Import', false);\n\t\tthis.simUI = simUI;\n\t\tthis.textElem.classList.add('small-textarea');\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items and enchants)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Heroic Presence, Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tprivate token: string = '';\n\tprivate async getWCLBearerToken(): Promise<string> {\n\t\tif (this.token == '') {\n\t\t\tconst response = await fetch('https://classic.warcraftlogs.com/oauth/token', {\n\t\t\t\t'method': 'POST',\n\t\t\t\t'headers': {\n\t\t\t\t\t'Authorization': 'Basic ' + btoa('963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3'),\n\t\t\t\t},\n\t\t\t\tbody: new URLSearchParams({\n\t\t\t\t\t'grant_type': 'client_credentials',\n\t\t\t\t}),\n\t\t\t})\n\t\t\tconst json = await response.json();\n\t\t\tthis.token = json.access_token;\n\t\t}\n\t\treturn this.token;\n\t}\n\n\tprivate async queryWCL(query: string): Promise<any> {\n\t\tconst token = await this.getWCLBearerToken();\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Authorization': `Bearer ${token}`,\n\t\t\t'Accept': 'application/json',\n\t\t};\n\n\t\tconst queryURL = `https://classic.warcraftlogs.com/api/v2/client?query=${query}`;\n\t\tthis.queryCounter++;\n\n\t\t// Query WCL\n\t\tconst res = await fetch(encodeURI(queryURL), {\n\t\t\t'method': 'GET',\n\t\t\t'headers': headers,\n\t\t});\n\n\t\tconst result = await res.json();\n\t\tif (result?.errors?.length) {\n\t\t\tconst errorStr = result.errors.map((e: any) => e.message).join('\\n');\n\t\t\tthrow new Error(`GraphQL error: ${errorStr}\\n\\nQuery: ${query}`);\n\t\t} else {\n\t\t\tconsole.debug(`WCL query: ${query}\\n\\nResult: ${JSON.stringify(result)}`);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async parseURL(url: string): Promise<wclUrlData> {\n\t\tconst match = url.match(/classic\\.warcraftlogs\\.com\\/reports\\/([a-zA-Z0-9:]+)\\/?(#.*fight=((\\d+)|(last)))?/);\n\t\tif (!match) {\n\t\t\tthrow new Error(`Invalid WCL URL ${url}, must look like \"classic.warcraftlogs.com/reports/XXXX\"`);\n\t\t}\n\n\t\tconst urlData = {\n\t\t\treportID: match[1],\n\t\t\tfightID: '',\n\t\t}\n\n\t\t// If the URL has a Fight ID in it, use it\n\t\tif (match[2] && match[3] && match[3] != 'last') {\n\t\t\turlData.fightID = match[3];\n\t\t} else {\n\t\t\t// Make a separate query to get the corresponding ReportFights\n\t\t\tconst fightDataQuery = `{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst fightData = await this.queryWCL(fightDataQuery);\n\t\t\tconst fights = fightData.data.reportData.report.fights;\n\n\t\t\tif (match[3] == 'last') {\n\t\t\t\turlData.fightID = String(fights[fights.length - 1].id)\n\t\t\t} else {\n\t\t\t\t// Default to using the first Fight\n\t\t\t\turlData.fightID = String(fights[0].id);\n\t\t\t}\n\t\t}\n\n\t\tconsole.debug(`Importing WCL report: ${JSON.stringify(urlData)}`);\n\t\treturn urlData;\n\t}\n\n\tprivate async getRateLimit(): Promise<wclRateLimitData> {\n\t\tconst query = `{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }`;\n\t\tconst result = await this.queryWCL(query);\n\t\tconst data = result['data']['rateLimitData'] as wclRateLimitData;\n\t\treturn data;\n\t}\n\n\tasync onImport(importLink: string) {\n\t\tthis.importButton.disabled = true;\n\t\tthis.rootElem.style.cursor = 'wait';\n\t\ttry {\n\t\t\tawait this.doImport(importLink);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\talert('Failed import from WCL: ' + error);\n\t\t}\n\t\tthis.importButton.disabled = false\n\t\tthis.rootElem.style.removeProperty('cursor');\n\t}\n\n\tasync doImport(importLink: string) {\n\t\tif (!importLink.length) {\n\t\t\tthrow new Error('No import link provided!');\n\t\t}\n\n\t\tconst urlData = await this.parseURL(importLink);\n\t\tawait this.getRateLimit();\n\n\t\t// Schema for WCL API here: https://www.warcraftlogs.com/v2-api-docs/warcraft/\n\t\t// WCL charges us 1 'point' for each subquery we issue within the request. So\n\t\t// by using filter expressions we can combine our queries together, to spend\n\t\t// fewer points.\n\t\tconst reportDataQuery = `{\n\t\t\treportData {\n\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${urlData.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${urlData.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${urlData.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: \"${[racialSpells, professionSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${urlData.fightID}], dataType:Casts, filterExpression: \"${[externalCDSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${urlData.fightID}], dataType:Healing, filterExpression: \"${[samePartyHealingSpells, otherPartyHealingSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${urlData.fightID}], dataType:Resources, filterExpression: \"ability.id = 39609\", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`;\n\t\tconst reportData = await this.queryWCL(reportDataQuery);\n\n\t\t// Process the report data.\n\t\tconst wclData = reportData.data.reportData.report; // TODO: Typings?\n\t\tconst playerData: wclPlayer[] = wclData.playerDetails.data.entries;\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tconst wclPlayers = playerData.map(wclPlayer => new WCLSimPlayer(wclPlayer, this.simUI, eventID));\n\t\t\tthis.inferRace(eventID, wclData, wclPlayers);\n\t\t\tthis.inferProfessions(eventID, wclData, wclPlayers);\n\t\t\tthis.inferAssignments(eventID, wclData, wclPlayers);\n\t\t\tthis.inferPartyComposition(eventID, wclData, wclPlayers);\n\t\t\tconst numPaladins = wclPlayers.filter(player => player.player.getClass() == Class.ClassPaladin).length;\n\t\t\tconst settings = RaidSimSettings.create({\n\t\t\t\tencounter: this.getEncounterProto(wclData),\n\t\t\t\traid: this.getRaidProto(wclPlayers),\n\t\t\t\tblessings: makeDefaultBlessings(numPaladins),\n\t\t\t});\n\n\t\t\t// Clear the raid out to avoid any taint issues.\n\t\t\tthis.simUI.clearRaid(eventID);\n\t\t\tthis.simUI.fromProto(eventID, settings);\n\t\t});\n\n\t\tthis.close();\n\t}\n\n\tprivate inferRace(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\twclPlayers.forEach(p => p.player.setRace(eventID, Race.RaceUnknown));\n\n\t\t// If defined in log, use that faction. Otherwise default to UI setting.\n\t\tlet faction = (wclData.guild?.faction?.id || this.simUI.raidPicker?.getCurrentFaction() || Faction.Horde) as Faction;\n\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tracialSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames.get(spell.race)} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.player.setRace(eventID, spell.race);\n\t\t\t\t\tfaction = raceToFaction[spell.race];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(p => {\n\t\t\tif (p.player.getRace() == Race.RaceUnknown) {\n\t\t\t\tp.player.setRace(eventID, p.preset.defaultFactionRaces[faction]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate inferProfessions(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tprofessionSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer && !sourcePlayer.inferredProfessions.includes(spell.profession)) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has profession ${professionNames.get(spell.profession)} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.inferredProfessions.push(spell.profession);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(player => {\n\t\t\tlet professions = distinct(player.inferredProfessions.concat(player.player.getGear().getProfessionRequirements()));\n\t\t\tif (professions.length == 0) {\n\t\t\t\tprofessions = [Profession.Engineering, Profession.Jewelcrafting];\n\t\t\t} else if (professions.length == 1) {\n\t\t\t\tif (professions[0] != Profession.Engineering) {\n\t\t\t\t\tprofessions.push(Profession.Engineering);\n\t\t\t\t} else {\n\t\t\t\t\tprofessions.push(Profession.Jewelcrafting);\n\t\t\t\t}\n\t\t\t}\n\t\t\tplayer.player.setProfessions(eventID, professions);\n\t\t});\n\t}\n\n\tprivate inferAssignments(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.fightCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\texternalCDSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer && sourcePlayer.player.getClass() == spell.class) {\n\t\t\t\t\tconst specOptions = spell.applyFunc(sourcePlayer.player, targetPlayer.toUnitReference());\n\t\t\t\t\tsourcePlayer.player.setSpecOptions(eventID, specOptions);\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} is targeting ${targetPlayer.name} with ${spell.name} from cast event`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// Assigns the raidIndex field for all players.\n\tprivate inferPartyComposition(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst setPlayersInParty = (player1: WCLSimPlayer, player2: WCLSimPlayer, reason: string) => {\n\t\t\tif (player1.addPlayerInParty(player2) || player2.addPlayerInParty(player1)) {\n\t\t\t\tconsole.log(`Inferring players ${player1.name} and ${player2.name} in same party from ${reason} event`);\n\t\t\t}\n\t\t};\n\n\t\tconst healEventsBySpellId = bucket(wclData.fightHealEvents.data as Array<wclHealEvent>, event => String(event.abilityGameID));\n\n\t\t// These spells only affect players in the same party as the caster.\n\t\tsamePartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, spell.name);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Prayer of Healing is a bit different, we can infer that players who are targeted at the same time are in a group.\n\t\totherPartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tconst spellEventsByTimestamp = bucket(spellEvents, event => String(event.timestamp) + String(event.sourceID));\n\t\t\tfor (const [_timestamp, eventsAtTime] of Object.entries(spellEventsByTimestamp)) {\n\t\t\t\tconst spellTargets = eventsAtTime.map(event => wclPlayers.find(player => player.id == event.targetID));\n\t\t\t\tfor (let i = 0; i < spellTargets.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < spellTargets.length; j++) {\n\t\t\t\t\t\tif (i != j && spellTargets[i] && spellTargets[j]) {\n\t\t\t\t\t\t\tsetPlayersInParty(spellTargets[i]!, spellTargets[j]!, spell.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == combatantInfo.sourceID);\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, 'Heroic Presence');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\t// Assign players with same-group inferences.\n\t\tlet inferredPlayers = wclPlayers.filter(player => player.playersInParty.length > 0);\n\t\tlet nextEmptyPartyIdx = 0;\n\t\twhile (inferredPlayers.length > 0) {\n\t\t\t// Find all the players in the same party as the first player.\n\t\t\tlet partyMembers = [inferredPlayers[0]].concat(inferredPlayers[0].playersInParty);\n\t\t\tlet numMembers = 0;\n\t\t\twhile (partyMembers.length != numMembers) {\n\t\t\t\tnumMembers = partyMembers.length;\n\t\t\t\tpartyMembers = distinct(partyMembers.map(member => [member].concat(member.playersInParty)).flat());\n\t\t\t}\n\n\t\t\t// Assign these members to an empty party.\n\t\t\tconst partyIdx = nextEmptyPartyIdx;\n\t\t\tnextEmptyPartyIdx++;\n\t\t\tpartyMembers.forEach((member, i) => {\n\t\t\t\tmember.raidIndex = partyIdx * 5 + i;\n\t\t\t});\n\n\t\t\tinferredPlayers = inferredPlayers.filter(player => !partyMembers.includes(player));\n\t\t}\n\n\t\t// Assign remaining players into open slots.\n\t\tconst allRaidIndexes = [...Array(40).keys()];\n\t\tconst nextFreeIndex = () => allRaidIndexes.find(idx => !wclPlayers.some(p => p.raidIndex == idx)) ?? -1;\n\t\twclPlayers\n\t\t\t.filter(player => player.raidIndex == -1)\n\t\t\t.forEach(player => {\n\t\t\t\tconst nextIdx = nextFreeIndex();\n\t\t\t\tif (nextIdx == -1) {\n\t\t\t\t\tthrow new Error('Invalid next idx');\n\t\t\t\t}\n\t\t\t\tplayer.raidIndex = nextIdx;\n\t\t\t});\n\t}\n\n\tprivate getEncounterProto(wclData: any): EncounterProto {\n\t\tconst fight: { startTime: number, endTime: number, id: number, name: string } = wclData.fights[0];\n\n\t\tconst encounter = EncounterProto.create({\n\t\t\tduration: (fight.endTime - fight.startTime) / 1000,\n\t\t\ttargets: [],\n\t\t});\n\n\t\t// Use the preset encounter if it exists.\n\t\tlet closestEncounterPreset = this.simUI.sim.db.getAllPresetEncounters().find(enc => enc.path.includes(fight.name));\n\t\tif (closestEncounterPreset && closestEncounterPreset.targets.length) {\n\t\t\tclosestEncounterPreset.targets\n\t\t\t\t.map(mob => mob.target as TargetProto)\n\t\t\t\t.filter(target => target !== undefined)\n\t\t\t\t.forEach(target => encounter.targets.push(target));\n\t\t}\n\n\t\t// Build a manual target list if no preset encounter exists.\n\t\tif (encounter.targets.length === 0) {\n\t\t\tencounter.targets.push(Encounter.defaultTargetProto());\n\t\t}\n\n\t\treturn encounter;\n\t}\n\n\tprivate getRaidProto(wclPlayers: WCLSimPlayer[]): RaidProto {\n\t\tconst raid = RaidProto.create({\n\t\t\tparties: [...new Array(MAX_NUM_PARTIES).keys()].map(() => PartyProto.create({\n\t\t\t\tplayers: [...new Array(5).keys()].map(() => PlayerProto.create()),\n\t\t\t})),\n\t\t});\n\n\t\twclPlayers\n\t\t\t.forEach(player => {\n\t\t\t\tconst positionInParty = player.raidIndex % 5;\n\t\t\t\tconst partyIdx = (player.raidIndex - positionInParty) / 5;\n\t\t\t\tconst playerProto = player.player.toProto();\n\t\t\t\traid.parties[partyIdx].players[positionInParty] = playerProto;\n\n\t\t\t\tif (isTankSpec(playerToSpec(playerProto))) {\n\t\t\t\t\traid.tanks.push(player.toUnitReference());\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn raid;\n\t}\n}\n\nclass WCLSimPlayer {\n\tpublic readonly data: wclPlayer;\n\tpublic readonly id: number;\n\tpublic readonly name: string;\n\tpublic readonly type: string;\n\tpublic raidIndex: number = -1;\n\n\tprivate readonly simUI: RaidSimUI;\n\tprivate readonly fullType: string;\n\tprivate readonly spec: Spec | null;\n\n\treadonly player: Player<any>;\n\treadonly preset: RaidSimPreset<any>;\n\n\tinferredProfessions: Array<Profession> = [];\n\n\treadonly playersInParty: Array<WCLSimPlayer> = [];\n\n\tconstructor(data: wclPlayer, simUI: RaidSimUI, eventID: EventID) {\n\t\tthis.simUI = simUI;\n\t\tthis.data = data;\n\n\t\tthis.name = data.name;\n\t\tthis.id = data.id;\n\t\tthis.type = data.type;\n\n\t\tconst wclSpec = data.icon.split('-')[1];\n\t\tthis.fullType = this.type + wclSpec;\n\t\tconsole.log(`WCL spec: ${this.fullType}`);\n\n\t\tconst foundSpec = fullTypeToSpec[this.fullType] ?? null;\n\t\tif (foundSpec == null) {\n\t\t\tthrow new Error('Player type not implemented: ' + this.fullType);\n\t\t}\n\t\tthis.spec = foundSpec;\n\t\tthis.player = new Player(this.spec, simUI.sim);\n\n\t\tthis.preset = WCLSimPlayer.getMatchingPreset(foundSpec, data.talents);\n\t\tif (this.preset === undefined) {\n\t\t\tthrow new Error('Could not find matching preset: ' + JSON.stringify({\n\t\t\t\t'name': this.name,\n\t\t\t\t'type': this.fullType,\n\t\t\t\t'talents': data.talents,\n\t\t\t}).toString());\n\t\t}\n\n\t\t// Apply preset defaults.\n\t\tthis.player.applySharedDefaults(eventID);\n\t\tthis.player.setTalentsString(eventID, this.preset.talents.talentsString);\n\t\tthis.player.setConsumes(eventID, this.preset.consumes);\n\t\tthis.player.setSpecOptions(eventID, this.preset.specOptions);\n\t\tthis.player.setProfessions(eventID, [Profession.Engineering, Profession.Jewelcrafting]);\n\n\t\t// Apply settings from report data.\n\t\tthis.player.setName(eventID, data.name);\n\t\tthis.player.setGear(eventID, simUI.sim.db.lookupEquipmentSpec(EquipmentSpec.create({\n\t\t\titems: data.gear.map(gear => ItemSpec.create({\n\t\t\t\tid: gear.id,\n\t\t\t\tenchant: gear.permanentEnchant,\n\t\t\t})),\n\t\t})));\n\t}\n\n\tprivate static getMatchingPreset(spec: Spec, talents: wclTalents[]): RaidSimPreset<Spec> {\n\t\tconst matchingPresets = playerPresets.filter((preset) => preset.spec == spec);\n\t\tlet presetIdx = 0;\n\n\t\tif (matchingPresets && matchingPresets.length > 1) {\n\t\t\tlet distance = 999;\n\t\t\t// Search talents and find the preset that the players talents most closely match.\n\t\t\tmatchingPresets.forEach((preset, i) => {\n\t\t\t\tconst presetTalents = getTalentTreePoints(preset.talents.talentsString);\n\t\t\t\t// Diff the distance to the preset.\n\t\t\t\tconst newDistance = presetTalents.reduce((acc, v, i) => acc += Math.abs(talents[i]?.guid - presetTalents[i]), 0);\n\n\t\t\t\t// If this is the best distance, assign this preset.\n\t\t\t\tif (newDistance < distance) {\n\t\t\t\t\tpresetIdx = i;\n\t\t\t\t\tdistance = newDistance;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn matchingPresets[presetIdx];\n\t}\n\n\tpublic toUnitReference(): UnitReference {\n\t\treturn UnitReference.create({\n\t\t\ttype: UnitReference_Type.Player,\n\t\t\tindex: this.raidIndex,\n\t\t});\n\t}\n\n\tpublic addPlayerInParty(other: WCLSimPlayer): boolean {\n\t\tif (other != this && !this.playersInParty.includes(other)) {\n\t\t\tthis.playersInParty.push(other);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst fullTypeToSpec: Record<string, Spec> = {\n\t'DruidBalance': Spec.SpecBalanceDruid,\n\t'DruidFeral': Spec.SpecFeralDruid,\n\t'DruidWarden': Spec.SpecFeralTankDruid,\n\t'DruidGuardian': Spec.SpecFeralTankDruid,\n\t'DruidRestoration': Spec.SpecRestorationDruid,\n\t'HunterBeastMastery': Spec.SpecHunter,\n\t'HunterSurvival': Spec.SpecHunter,\n\t'HunterMarksmanship': Spec.SpecHunter,\n\t'MageArcane': Spec.SpecMage,\n\t'MageFire': Spec.SpecMage,\n\t'MageFrost': Spec.SpecMage,\n\t'PaladinHoly': Spec.SpecHolyPaladin,\n\t'PaladinJusticar': Spec.SpecProtectionPaladin,\n\t'PaladinProtection': Spec.SpecProtectionPaladin,\n\t'PaladinRetribution': Spec.SpecRetributionPaladin,\n\t'PriestHoly': Spec.SpecHealingPriest,\n\t'PriestDiscipline': Spec.SpecHealingPriest,\n\t'PriestShadow': Spec.SpecShadowPriest,\n\t'RogueAssassination': Spec.SpecRogue,\n\t'RogueCombat': Spec.SpecRogue,\n\t'RogueSubtlety': Spec.SpecRogue,\n\t'ShamanElemental': Spec.SpecElementalShaman,\n\t'ShamanEnhancement': Spec.SpecEnhancementShaman,\n\t'ShamanRestoration': Spec.SpecRestorationShaman,\n\t'WarlockDestruction': Spec.SpecWarlock,\n\t'WarlockAffliction': Spec.SpecWarlock,\n\t'WarlockDemonology': Spec.SpecWarlock,\n\t'WarriorArms': Spec.SpecWarrior,\n\t'WarriorFury': Spec.SpecWarrior,\n\t'WarriorChampion': Spec.SpecWarrior,\n\t'WarriorWarrior': Spec.SpecWarrior,\n\t'WarriorGladiator': Spec.SpecWarrior,\n\t'WarriorProtection': Spec.SpecProtectionWarrior,\n};\n\n// Spells which imply a specific Race.\nconst racialSpells: Array<{ id: number, name: string, race: Race }> = [\n\t{ id: 26297, name: 'Berserking', race: Race.RaceTroll },\n\t{ id: 20572, name: 'Blood Fury (AP)', race: Race.RaceOrc },\n\t{ id: 20589, name: 'Escape Artist', race: Race.RaceGnome },\n\t{ id: 20594, name: 'Stoneform', race: Race.RaceDwarf },\n\t{ id: 20549, name: 'War Stomp', race: Race.RaceTauren },\n\t{ id: 7744, name: 'Will of the Forsaken', race: Race.RaceUndead },\n\t{ id: 59752, name: 'Will to Survive', race: Race.RaceHuman },\n];\n\n// Spells which imply a specific Profession.\nconst professionSpells: Array<{ id: number, name: string, profession: Profession }> = [\n\t{ id: 55503, name: 'Lifeblood', profession: Profession.Herbalism },\n\t{ id: 50305, name: 'Skinning', profession: Profession.Skinning },\n];\n\nconst externalCDSpells: Array<{ id: number, name: string, class: Class, applyFunc: (player: Player<any>, raidTarget: UnitReference) => SpecOptions<any> }> = [\n\t{\n\t\tid: 29166, name: 'Innervate', class: Class.ClassDruid, applyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<DruidSpecs>;\n\t\t\toptions.innervateTarget = raidTarget;\n\t\t\treturn options;\n\t\t}\n\t},\n\t{\n\t\tid: 10060, name: 'Power Infusion', class: Class.ClassPriest, applyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<PriestSpecs>;\n\t\t\toptions.powerInfusionTarget = raidTarget;\n\t\t\treturn options;\n\t\t}\n\t},\n\t{\n\t\tid: 57933, name: 'Tricks of the Trade', class: Class.ClassRogue, applyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<RogueSpecs>;\n\t\t\toptions.tricksOfTheTradeTarget = raidTarget;\n\t\t\treturn options;\n\t\t}\n\t},\n];\n\n// Healing spells which only affect the caster's party.\nconst samePartyHealingSpells: Array<{ id: number, name: string }> = [\n\t{ id: 52042, name: 'Healing Stream Totem' },\n\t{ id: 48076, name: 'Holy Nova' },\n\t{ id: 48445, name: 'Tranquility' },\n\t{ id: 15290, name: 'Vampiric Embrace' },\n];\n\n// Healing spells which only affect a single party, but not necessarily the caster's party.\nconst otherPartyHealingSpells: Array<{ id: number, name: string }> = [\n\t{ id: 48072, name: 'Prayer of Healing' },\n];\n\ninterface wclUrlData {\n\treportID: string,\n\tfightID: string,\n}\n\ninterface wclCastEvent {\n\ttype: 'cast',\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n}\n\ninterface wclHealEvent {\n\ttype: 'heal',\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n\tamount: number;\n}\n\ninterface wclCombatantInfoEvent {\n\ttype: 'combatantinfo';\n\tsourceID: number;\n\tauras: {\n\t\tsource: number;\n\t\tability: number;\n\t\tname: string;\n\t}[];\n}\n\ninterface wclRateLimitData {\n\tlimitPerHour: number,\n\tpointsSpentThisHour: number,\n\tpointsResetIn: number\n}\n\n// Typed interface for WCL talents\ninterface wclTalents {\n\tname: string;\n\tguid: number;\n\ttype: number;\n\tabilityIcon: string;\n}\n\n// Typed interface for WCL Gear\ninterface wclGear {\n\tid: number;\n\tslot: number;\n\tquality: number;\n\ticon: string;\n\tname: string;\n\titemLevel: number;\n\tpermanentEnchant: number;\n\tpermanentEnchantName: string;\n\ttemporaryEnchant: number;\n}\n\n// Typed interface for WCL Player Data\ninterface wclPlayer {\n\tname: string;\n\tid: number;\n\tguid?: number;\n\ttype: string; // Paladin, Mage, etc.\n\ticon: string; // Paladin-Justicar, Mage-Fire, etc.\n\titemLevel?: number;\n\ttotal?: number;\n\tactiveTime?: number;\n\tactiveTimeReduced?: number;\n\tabilities?: unknown[]; // Don't care about abilities.\n\tdamageAbilities?: unknown[];\n\ttargets?: unknown[];\n\ttalents: wclTalents[];\n\tgear: wclGear[];\n}\n","import { EmbeddedDetailedResults } from \"../core/components/detailed_results.js\";\nimport { LogRunner } from \"../core/components/detailed_results/log_runner.js\";\nimport { addRaidSimAction, RaidSimResultsManager, ReferenceData } from \"../core/components/raid_sim_action.js\";\n\nimport { Player } from \"../core/player.js\";\nimport { Raid as RaidProto } from \"../core/proto/api.js\";\nimport { Class, Encounter as EncounterProto, RaidBuffs, TristateEffect } from \"../core/proto/common.js\";\nimport { Blessings } from \"../core/proto/paladin.js\";\nimport { BlessingsAssignments, RaidSimSettings, SavedEncounter } from \"../core/proto/ui.js\";\nimport { playerToSpec } from \"../core/proto_utils/utils.js\";\nimport { Sim } from \"../core/sim.js\";\nimport { SimUI } from \"../core/sim_ui.js\";\nimport { raidSimStatus } from '../core/launched_sims.js';\nimport { EventID, TypedEvent } from \"../core/typed_event.js\";\n\nimport { RaidTab } from \"./raid_tab.js\";\nimport { SettingsTab } from \"./settings_tab.js\";\n\nimport { BlessingsPicker } from \"./blessings_picker.js\";\nimport { implementedSpecs } from \"./presets.js\";\nimport { RaidPicker } from \"./raid_picker.js\";\n\nimport * as ImportExport from \"./import_export.js\";\n\ndeclare var pako: any;\n\nexport interface RaidSimConfig {\n\tknownIssues?: Array<string>,\n}\n\nconst extraKnownIssues: Array<string> = [\n\t//'We\\'re still missing implementations for many specs. If you\\'d like to help us out, check out our <a href=\"https://github.com/wowsims/sod\">Github project</a> or <a href=\"https://discord.gg/jJMPr9JWwx\">join our discord</a>!',\n];\n\nexport class RaidSimUI extends SimUI {\n\tprivate readonly config: RaidSimConfig;\n\tprivate raidSimResultsManager: RaidSimResultsManager | null = null;\n\tpublic raidPicker: RaidPicker | null = null;\n\tpublic blessingsPicker: BlessingsPicker | null = null;\n\n\t// Emits when the raid comp changes. Includes changes to buff bots.\n\treadonly compChangeEmitter = new TypedEvent<void>();\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\treadonly referenceChangeEmitter = new TypedEvent<void>();\n\n\tconstructor(parentElem: HTMLElement, config: RaidSimConfig) {\n\t\tsuper(parentElem, new Sim(), {\n\t\t\tcssClass: 'raid-sim-ui',\n\t\t\tcssScheme: 'raid',\n\t\t\tspec: null,\n\t\t\tlaunchStatus: raidSimStatus,\n\t\t\tknownIssues: (config.knownIssues || []).concat(extraKnownIssues),\n\t\t});\n\n\t\tthis.config = config;\n\n\t\tthis.sim.raid.compChangeEmitter.on(eventID => this.compChangeEmitter.emit(eventID));\n\t\t[\n\t\t\tthis.compChangeEmitter,\n\t\t\tthis.sim.changeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t\tthis.changeEmitter.on(() => this.recomputeSettingsLayout());\n\n\t\tthis.sim.setModifyRaidProto(raidProto => this.modifyRaidProto(raidProto));\n\t\tthis.sim.waitForInit().then(() => this.loadSettings());\n\n\t\tthis.addSidebarComponents();\n\t\tthis.addTopbarComponents();\n\t\tthis.addRaidTab();\n\t\tthis.addSettingsTab();\n\t\tthis.addDetailedResultsTab();\n\t}\n\n\tprivate loadSettings() {\n\t\tconst initEventID = TypedEvent.nextEventID();\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tlet loadedSettings = false;\n\n\t\t\tconst savedSettings = window.localStorage.getItem(this.getSettingsStorageKey());\n\t\t\tif (savedSettings != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconst settings = RaidSimSettings.fromJsonString(savedSettings);\n\t\t\t\t\tthis.fromProto(initEventID, settings);\n\t\t\t\t\tloadedSettings = true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('Failed to parse saved settings: ' + e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!loadedSettings) {\n\t\t\t\tthis.applyDefaults(initEventID);\n\t\t\t}\n\n\t\t\t// This needs to go last so it doesn't re-store things as they are initialized.\n\t\t\tthis.changeEmitter.on(eventID => {\n\t\t\t\tconst jsonStr = RaidSimSettings.toJsonString(this.toProto());\n\t\t\t\twindow.localStorage.setItem(this.getSettingsStorageKey(), jsonStr);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate addSidebarComponents() {\n\t\tthis.raidSimResultsManager = addRaidSimAction(this);\n\t\tthis.raidSimResultsManager.changeEmitter.on(eventID => this.referenceChangeEmitter.emit(eventID));\n\t}\n\n\tprivate addTopbarComponents() {\n\t\tthis.simHeader.addImportLink('JSON', (parent) => new ImportExport.RaidJsonImporter(this.rootElem, this));\n\t\tthis.simHeader.addImportLink('WCL', (parent) => new ImportExport.RaidWCLImporter(this.rootElem, this));\n\n\t\tthis.simHeader.addExportLink('JSON', (parent) => new ImportExport.RaidJsonExporter(this.rootElem, this));\n\t}\n\n\tprivate addRaidTab() {\n\t\tnew RaidTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addSettingsTab() {\n\t\tnew SettingsTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addDetailedResultsTab() {\n\t\tthis.addTab('Results', 'detailed-results-tab', `\n\t\t\t<div class=\"detailed-results\">\n\t\t\t</div>\n\t\t`);\n\n\t\tconst detailedResults = new EmbeddedDetailedResults(this.rootElem.getElementsByClassName('detailed-results')[0] as HTMLElement, this, this.raidSimResultsManager!);\n\t}\n\n\tprivate recomputeSettingsLayout() {\n\t\twindow.dispatchEvent(new Event('resize'));\n\t}\n\n\tprivate modifyRaidProto(raidProto: RaidProto) {\n\t\t// Apply blessings.\n\t\tconst numPaladins = this.getClassCount(Class.ClassPaladin);\n\t\tconst blessingsAssignments = this.blessingsPicker!.getAssignments();\n\t\timplementedSpecs.forEach(spec => {\n\t\t\tconst playerProtos = raidProto.parties\n\t\t\t\t.map(party => party.players.filter(player => player.class != Class.ClassUnknown && playerToSpec(player) == spec))\n\t\t\t\t.flat();\n\n\t\t\tblessingsAssignments.paladins.forEach((paladin, i) => {\n\t\t\t\tif (i >= numPaladins) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (paladin.blessings[spec] == Blessings.BlessingOfKings) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfKings = true);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfMight) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfMight = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfWisdom) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfWisdom = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfSanctuary) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfSanctuary = true);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getCurrentData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getReferenceData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetActivePlayers(): Array<Player<any>> {\n\t\treturn this.sim.raid.getActivePlayers();\n\t}\n\n\tgetClassCount(playerClass: Class): number {\n\t\treturn this.getActivePlayers().filter(player => player.isClass(playerClass)).length;\n\t}\n\n\tapplyDefaults(eventID: EventID) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.sim.raid.fromProto(eventID, RaidProto.create({\n\t\t\t\tnumActiveParties: 5,\n\t\t\t}));\n\t\t\tthis.sim.setPhase(eventID, 1);\n\t\t\tthis.sim.encounter.applyDefaults(eventID);\n\t\t\tthis.sim.applyDefaults(eventID, true, true);\n\t\t\tthis.sim.setShowDamageMetrics(eventID, true);\n\t\t});\n\t}\n\n\ttoProto(): RaidSimSettings {\n\t\treturn RaidSimSettings.create({\n\t\t\tsettings: this.sim.toProto(),\n\t\t\traid: this.sim.raid.toProto(true),\n\t\t\tblessings: this.blessingsPicker!.getAssignments(),\n\t\t\tencounter: this.sim.encounter.toProto(),\n\t\t});\n\t}\n\n\ttoLink(): string {\n\t\tconst proto = this.toProto();\n\t\t// When sharing links, people generally don't intend to share settings.\n\t\tproto.settings = undefined;\n\n\t\tconst protoBytes = RaidSimSettings.toBinary(proto);\n\t\tconst deflated = pako.deflate(protoBytes, { to: 'string' });\n\t\tconst encoded = btoa(String.fromCharCode(...deflated));\n\n\t\tconst linkUrl = new URL(window.location.href);\n\t\tlinkUrl.hash = encoded;\n\t\treturn linkUrl.toString();\n\t}\n\n\tfromProto(eventID: EventID, settings: RaidSimSettings) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tif (settings.settings) {\n\t\t\t\tthis.sim.fromProto(eventID, settings.settings);\n\t\t\t}\n\t\t\tthis.sim.raid.fromProto(eventID, settings.raid || RaidProto.create());\n\t\t\tthis.sim.encounter.fromProto(eventID, settings.encounter || EncounterProto.create());\n\t\t\tthis.blessingsPicker!.setAssignments(eventID, settings.blessings || BlessingsAssignments.create());\n\t\t});\n\t}\n\n\tclearRaid(eventID: EventID) {\n\t\tthis.sim.raid.clear(eventID);\n\t}\n\n\t// Returns the actual key to use for local storage, based on the given key part and the site context.\n\tgetStorageKey(keyPart: string): string {\n\t\treturn '__wotlk_raid__' + keyPart;\n\t}\n\n\tgetSavedRaidStorageKey(): string {\n\t\treturn this.getStorageKey('__savedRaid__');\n\t}\n}\n","import { RaidSimUI } from './raid_sim_ui.js';\n\nconst ui = new RaidSimUI(document.body, {});\n"],"names":["specSimFactories","Spec","SpecBalanceDruid","parentElem","player","BalanceDruidSimUI","SpecFeralDruid","FeralDruidSimUI","SpecFeralTankDruid","FeralTankDruidSimUI","SpecRestorationDruid","RestorationDruidSimUI","SpecElementalShaman","ElementalShamanSimUI","SpecEnhancementShaman","EnhancementShamanSimUI","SpecRestorationShaman","RestorationShamanSimUI","SpecHunter","HunterSimUI","SpecMage","MageSimUI","SpecRogue","RogueSimUI","SpecHolyPaladin","HolyPaladinSimUI","SpecProtectionPaladin","ProtectionPaladinSimUI","SpecRetributionPaladin","RetributionPaladinSimUI","SpecHealingPriest","HealingPriestSimUI","SpecShadowPriest","ShadowPriestSimUI","SpecWarrior","WarriorSimUI","SpecProtectionWarrior","ProtectionWarriorSimUI","SpecWarlock","WarlockSimUI","SpecTankWarlock","TankWarlockSimUI","playerPresets","naturalSpecOrder","map","getSpecConfig","config","raidSimPresets","flat","implementedSpecs","Set","preset","spec","NEW_PLAYER","RaidPicker","Component","constructor","parent","raidSimUI","super","__publicField","this","raid","sim","raidControls","document","createElement","classList","add","rootElem","appendChild","newPlayerPicker","NewPlayerPicker","EnumPicker","label","labelTooltip","values","name","value","changedEvent","numActivePartiesChangeEmitter","getValue","getNumActiveParties","setValue","eventID","newValue","setNumActiveParties","Faction","Alliance","Horde","factionChangeEmitter","getFaction","_picker","setFaction","latestPhaseWithAllPresets","Math","min","max","Object","keys","defaultGear","k","parseInt","Array","val","phase","phaseChangeEmitter","getPhase","setPhase","partiesContainer","partyPickers","getParties","party","i","PartyPicker","updateActiveParties","forEach","partyPicker","index","remove","on","ondragend","clearDragPlayer","clearDragParty","getCurrentFaction","getCurrentPhase","getPlayerPicker","raidIndex","floor","MAX_PARTY_SIZE","playerPickers","getPlayerPickers","setDragPlayer","fromIndex","type","currentDragPlayer","currentDragPlayerFromIndex","currentDragType","setDragParty","currentDragParty","raidPicker","setAttribute","innerHTML","playersContainer","getElementsByClassName","PlayerPicker","dpsResultElem","referenceDeltaElem","referenceChangeEmitter","currentData","getCurrentData","referenceData","getReferenceData","partyDps","simResult","raidMetrics","parties","dps","avg","referenceDps","textContent","toFixed","formatDeltaTextElem","ondragstart","event","target","dataTransfer","dropEffect","effectAllowed","dragEnterCounter","ondragenter","preventDefault","ondragleave","ondragover","ondrop","TypedEvent","nextEventID","freezeAllAndDo","srcPartyPicker","srcPlayerPicker","dstPlayerPicker","srcPlayer","dstPlayer","setPlayer","labelElem","iconElem","nameElem","resultsElem","compChangeEmitter","newPlayer","getPlayer","playerDps","getPlayerWithRaidIndex","dropData","getData","length","dragType","fromPlayerPicker","binary","atob","bytes","Uint8Array","charCodeAt","playerProto","PlayerProto","fromBinary","localPlayer","Player","playerToSpec","fromProto","clone","update","isTankSpec","tanks","getTanks","emptyIdx","findIndex","tank","getPlayerFromUnitReference","setTanks","concat","makeUnitReference","newOptions","getSpecOptions","innervateTarget","newUnitReference","getRaidIndex","setSpecOptions","applyNewPlayerAssignments","emit","className","classCssClass","cssClassForClass","getClass","getSpecIcon","getName","querySelector","bindPlayerEvents","addEventListener","_event","setName","emptyName","dragStart","playerDataProto","toProto","setData","btoa","String","fromCharCode","toBinary","editElem","copyElem","deleteElem","Tooltip","getOrCreateInstance","deleteTooltip","setDragImage","onclick","PlayerEditorModal","hide","BaseModal","body","closeButton","fixed","header","id","insertAdjacentHTML","editorRoot","getEnumValues","Class","wowClass","ClassUnknown","matchingPresets","filter","specToClass","classPresetsContainer","matchingPreset","presetElemFragment","tooltip","iconUrl","presetElem","children","dragImage","Image","src","applySharedDefaults","setRace","defaultFactionRaces","setTalentsString","talents","talentsString","specOptions","setConsumes","consumes","defaultName","setProfession1","otherDefaults","profession1","Profession","Engineering","setProfession2","profession2","Jewelcrafting","setDistanceFromTarget","distanceFromTarget","waitForInit","then","setGear","db","lookupEquipmentSpec","RaidStats","categories","RAID_STATS_OPTIONS","sections","section","sectionElem","contentElem","categoryOptions","push","RaidStatsCategory","changeEmitter","_","c","options","counterElem","tooltipElem","effects","opt","RaidStatsEffect","playerData","class","statsLink","customClass","html","placement","title","effect","total","sum","count","curPlayers","playerCssClass","textCssClassForClass","actionId","fill","getActivePlayers","p","condition","raidData","negateIf","cond","playerClass","clazz","extraCondition","isClass","playerClassAndTalentInternal","talentName","negateTalent","Boolean","getTalents","playerClassAndTalent","playerClassAndMissingTalent","playerSpecAndTalentInternal","isSpec","playerSpecAndTalent","raidBuff","buffName","getBuffs","isHealingSpec","isMeleeDpsSpec","isRangedDpsSpec","ActionId","fromSpellId","ClassShaman","ClassDruid","ClassPaladin","aura","PaladinAura","DevotionAura","totems","earth","EarthTotem","StoneskinTotem","fromItemId","ClassPriest","StrengthOfEarthTotem","ClassMage","ClassWarrior","shout","WarriorShout","WarriorShoutBattle","ClassHunter","water","WaterTotem","ManaSpringTotem","ClassWarlock","summon","WarlockSummon","Imp","ClassRogue","petType","HunterPetType","Bat","includes","getSimpleRotation","maintainDemoralizingRoar","CarrionBird","sting","HunterStingType","ScorpidSting","RaidTab","SimTab","simUI","identifier","leftPanel","rightPanel","contentContainer","buildTabContent","savedRaidManager","SavedDataManager","storageKey","getSavedRaidStorageKey","SavedRaid","create","blessings","blessingsPicker","getAssignments","faction","newRaid","RaidProto","setAssignments","BlessingsAssignments","changeEmitters","equals","a","b","toJson","fromJson","obj","loadUserData","UnitReferencePicker","Input","modObj","curPlayer","curUnitReference","getInputValue","buttonElem","dropdownElem","currentOptions","updateOptions","init","makeTargetOptions","isDropdown","getPlayers","option","makeOption","prevUnitReference","UnitReference","setInputValue","inputChanged","data","makeOptionElem","getInputElem","emptyUnitReference","optionData","find","outerHTML","playerFragment","AssignmentsPicker","innervatesPicker","InnervatesPicker","powerInfusionsPicker","PowerInfusionsPicker","AssignedBuffPicker","targetPickers","getTitle","sourcePlayers","getSourcePlayers","sourcePlayer","row","sourceElem","arrow","raidTargetPicker","extraCssClasses","noTargetLabel","specOptionsChangeEmitter","getPlayerValue","setPlayerValue","targetPickerData","targetPicker","targetPlayer","_eventID","powerInfusion","powerInfusionTarget","BlessingsPicker","assignments","makeDefaultBlessings","specs","paladinIndexes","append","buildSpecIcon","container","paladinIdx","pickers","blessingPicker","IconEnumPicker","numColumns","color","classColors","Blessings","BlessingUnknown","BlessingOfKings","BlessingOfMight","BlessingOfWisdom","BlessingOfSanctuary","zeroValue","enableWhen","numPaladins","getClassCount","picker","paladins","updatePickers","fragment","titleIcons","icon","specNames","newAssignments","TanksPicker","tanksChangeEmitter","j","raid2","SettingsTab","buildColumn","column1","column2","column3","buildEncounterSettings","buildConsumesSettings","buildOtherSettings","buildTankSettings","buildAssignmentSettings","buildBlessingsPicker","buildSavedDataPickers","contentBlock","ContentBlock","EncounterPicker","bodyElement","encounter","showExecuteProportion","makeBooleanRaidIconBuffInput","Tooltips.BLESSINGS_SECTION","savedEncounterManager","getSavedEncounterStorageKey","SavedEncounter","newEncounter","field","IconPicker","states","buffsChangeEmitter","newBuffs","setBuffs","RaidJsonImporter","Importer","descriptionElem","onImport","settings","RaidSimSettings","fromJsonString","ignoreUnknownFields","close","RaidJsonExporter","Exporter","allowDownload","JSON","stringify","RaidWCLImporter","textElem","getWCLBearerToken","token","response","fetch","method","headers","Authorization","URLSearchParams","grant_type","json","access_token","queryWCL","query","Accept","queryURL","queryCounter","res","encodeURI","result","errors","errorStr","e","message","join","Error","console","debug","parseURL","url","match","urlData","reportID","fightID","fightDataQuery","fights","reportData","report","getRateLimit","importLink","importButton","disabled","style","cursor","doImport","error","alert","removeProperty","reportDataQuery","racialSpells","professionSpells","spell","externalCDSpells","samePartyHealingSpells","otherPartyHealingSpells","wclData","playerDetails","entries","wclPlayers","wclPlayer","WCLSimPlayer","inferRace","inferProfessions","inferAssignments","inferPartyComposition","getEncounterProto","getRaidProto","clearRaid","Race","RaceUnknown","guild","castEventsBySpellId","bucket","reportCastEvents","abilityGameID","sourceID","log","raceNames","get","race","raceToFaction","getRace","inferredProfessions","profession","professionNames","professions","distinct","getGear","getProfessionRequirements","setProfessions","fightCastEvents","targetID","applyFunc","toUnitReference","setPlayersInParty","player1","player2","reason","addPlayerInParty","healEventsBySpellId","fightHealEvents","spellEvents","spellEventsByTimestamp","timestamp","_timestamp","eventsAtTime","spellTargets","combatantInfoEvents","combatantInfo","auras","ability","source","inferredPlayers","playersInParty","nextEmptyPartyIdx","partyMembers","numMembers","member","partyIdx","allRaidIndexes","nextIdx","idx","some","fight","EncounterProto","duration","endTime","startTime","targets","closestEncounterPreset","getAllPresetEncounters","enc","path","mob","Encounter","defaultTargetProto","MAX_NUM_PARTIES","PartyProto","players","positionInParty","wclSpec","split","fullType","foundSpec","fullTypeToSpec","getMatchingPreset","toString","EquipmentSpec","items","gear","ItemSpec","enchant","permanentEnchant","presetIdx","distance","presetTalents","getTalentTreePoints","newDistance","reduce","acc","v","abs","guid","UnitReference_Type","other","DruidBalance","DruidFeral","DruidWarden","DruidGuardian","DruidRestoration","HunterBeastMastery","HunterSurvival","HunterMarksmanship","MageArcane","MageFire","MageFrost","PaladinHoly","PaladinJusticar","PaladinProtection","PaladinRetribution","PriestHoly","PriestDiscipline","PriestShadow","RogueAssassination","RogueCombat","RogueSubtlety","ShamanElemental","ShamanEnhancement","ShamanRestoration","WarlockDestruction","WarlockAffliction","WarlockDemonology","WarriorArms","WarriorFury","WarriorChampion","WarriorWarrior","WarriorGladiator","WarriorProtection","RaceTroll","RaceOrc","RaceGnome","RaceDwarf","RaceTauren","RaceUndead","RaceHuman","Herbalism","Skinning","raidTarget","tricksOfTheTradeTarget","extraKnownIssues","SimUI","Sim","cssClass","cssScheme","launchStatus","raidSimStatus","knownIssues","emitter","recomputeSettingsLayout","setModifyRaidProto","raidProto","modifyRaidProto","loadSettings","addSidebarComponents","addTopbarComponents","addRaidTab","addSettingsTab","addDetailedResultsTab","initEventID","loadedSettings","savedSettings","window","localStorage","getItem","getSettingsStorageKey","warn","applyDefaults","jsonStr","toJsonString","setItem","raidSimResultsManager","addRaidSimAction","simHeader","addImportLink","ImportExport.RaidJsonImporter","ImportExport.RaidWCLImporter","addExportLink","ImportExport.RaidJsonExporter","simTabContentsContainer","addTab","EmbeddedDetailedResults","dispatchEvent","Event","blessingsAssignments","playerProtos","paladin","buffs","blessingOfKings","blessingOfMight","TristateEffect","TristateEffectImproved","blessingOfWisdom","blessingOfSanctuary","numActiveParties","setShowDamageMetrics","toLink","proto","protoBytes","deflated","pako","deflate","to","encoded","linkUrl","URL","location","href","hash","clear","getStorageKey","keyPart"],"mappings":"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"}