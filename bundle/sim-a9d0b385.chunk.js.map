{"version":3,"file":"sim-a9d0b385.chunk.js","sources":["../../../ui/feral_druid/inputs.ts","../../../ui/feral_druid/presets.ts","../../../ui/feral_druid/sim.ts"],"sourcesContent":["import { Player } from '../core/player.js';\nimport { Spec, UnitReference, UnitReference_Type as UnitType } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { EventID } from '../core/typed_event.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfInnervate = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecFeralDruid>({\n\tfieldName: 'innervateTarget',\n\tactionId: () => ActionId.fromSpellId(29166),\n\textraCssClasses: [\n\t\t'within-raid-sim-hide',\n\t],\n\tgetValue: (player: Player<Spec.SpecFeralDruid>) => player.getSpecOptions().innervateTarget?.type == UnitType.Player,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecFeralDruid>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tnewOptions.innervateTarget = UnitReference.create({\n\t\t\ttype: newValue ? UnitType.Player : UnitType.Unknown,\n\t\t\tindex: 0,\n\t\t});\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n});\n\nexport const LatencyMs = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecFeralDruid>({\n\tfieldName: 'latencyMs',\n\tlabel: 'Latency',\n\tlabelTooltip: 'Player latency, in milliseconds. Adds a delay to actions that cannot be spell queued.',\n});\n\nexport const AssumeBleedActive = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecFeralDruid>({\n\tfieldName: 'assumeBleedActive',\n\tlabel: 'Assume Bleed Always Active',\n\tlabelTooltip: 'Assume bleed always exists for \\'Rend and Tear\\' calculations. Otherwise will only calculate based on own rip/rake/lacerate.',\n\textraCssClasses: ['within-raid-sim-hide'],\n})\n\nexport const FeralDruidRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'minCombosForRip',\n\t\t\tlabel: 'Min Rip CP',\n\t\t\tlabelTooltip: 'Combo Point threshold for allowing a Rip cast',\n\t\t\tfloat: false,\n\t\t\tpositive: true,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'maxWaitTime',\n\t\t\tlabel: 'Max Wait Time',\n\t\t\tlabelTooltip: 'Max seconds to wait for an Energy tick to cast rather than powershifting',\n\t\t\tfloat: true,\n\t\t\tpositive: true,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'preroarDuration',\n\t\t\tlabel: 'Pre-Roar Duration',\n\t\t\tlabelTooltip: 'Seconds remaining on a prior Savage Roar buff at the start of the pull',\n\t\t\tfloat: true,\n\t\t\tpositive: true,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'maintainFaerieFire',\n\t\t\tlabel: 'Maintain Faerie Fire',\n\t\t\tlabelTooltip: 'If checked, bundle Faerie Fire refreshes with powershifts. Ignored if an external Faerie Fire debuff is selected in settings.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'precastTigersFury',\n\t\t\tlabel: `Pre-cast Tiger's Fury`,\n\t\t\tlabelTooltip: `If checked, model a pre-pull Tiger's Fury cast 3 seconds before initiating combat.`,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'useShredTrick',\n\t\t\tlabel: `Use Shred Trick`,\n\t\t\tlabelTooltip: `If checked, enable the \"Shred trick\" micro-optimization. This should only be used on short fight lengths with full powershifting uptime.`,\n\t\t}),\n\t],\n};\n","import {\n\tConsumes,\n\tFlask,\n\tFood,\n\tProfession,\n\tSpec,\n\tPotions,\n\tConjured,\n\tWeaponImbue,\n\tAgilityElixir,\n\tStrengthBuff\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tFeralDruid_Options as FeralDruidOptions,\n\tFeralDruid_Rotation as FeralDruidRotation,\n} from '../core/proto/druid.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport BlankGear from './gear_sets/blank.gear.json';\nimport Phase1Gear from './gear_sets/p1.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const BlankPreset = PresetUtils.makePresetGear('Blank', BlankGear);\nexport const DefaultGear = PresetUtils.makePresetGear('Phase 1', Phase1Gear);\n\nimport DefaultApl from './apls/default.apl.json';\nexport const APL_ROTATION_DEFAULT = PresetUtils.makePresetAPLRotation('APL Default', DefaultApl);\n\nexport const DefaultRotation = FeralDruidRotation.create({\n\tmaintainFaerieFire: false,\n\tminCombosForRip: 3,\n\tmaxWaitTime: 2.0,\n\tpreroarDuration: 26.0,\n\tprecastTigersFury: false,\n\tuseShredTrick: false,\n});\n\nexport const SIMPLE_ROTATION_DEFAULT = PresetUtils.makePresetSimpleRotation('Simple Default', Spec.SpecFeralDruid, DefaultRotation);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '500005001--05',\n\t}),\n};\n\nexport const DefaultOptions = FeralDruidOptions.create({\n\tlatencyMs: 100,\n\tassumeBleedActive: true,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskUnknown,\n\tfood: Food.FoodSmokedSagefish,\n\tdefaultPotion: Potions.ManaPotion,\n\tdefaultConjured: Conjured.ConjuredMinorRecombobulator,\n\tmainHandImbue: WeaponImbue.BlackfathomSharpeningStone,\n\tagilityElixir: AgilityElixir.ElixirOfLesserAgility,\n\tstrengthBuff: StrengthBuff.ElixirOfOgresStrength,\n\tboglingRoot: true,\n});\n\nexport const OtherDefaults = {\n\tprofession2: Profession.Leatherworking,\n};\n","import { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport {\n\tAPLAction,\n\tAPLPrepullAction,\n\tAPLListItem,\n\tAPLRotation,\n\tAPLRotation_Type as APLRotationType,\n} from '../core/proto/apl.js';\nimport {\n\tClass,\n\tCooldowns,\n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tRace,\n\tRaidBuffs,\n\tSpec,\n\tStat,\n  TristateEffect,\n  WeaponImbue,\n\tSaygesFortune\n} from '../core/proto/common.js';\nimport { FeralDruid_Rotation as DruidRotation } from '../core/proto/druid.js';\nimport { Gear } from '../core/proto_utils/gear.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport { TypedEvent } from '../core/typed_event.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as AplUtils from '../core/proto_utils/apl_utils.js';\nimport * as DruidInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecFeralDruid, {\n\tcssClass: 'feral-druid-sim-ui',\n\tcssScheme: 'druid',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\twarnings: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatFeralAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatMana,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatMP5,\n\t],\n\tepPseudoStats: [\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatFeralAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatMana,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatMP5,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatStrength]: 2.20,\n\t\t\t[Stat.StatAgility]: 2.02,\n\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t[Stat.StatFeralAttackPower]: 1,\n\t\t\t[Stat.StatMeleeHit]: 8.21,\n\t\t\t[Stat.StatMeleeCrit]: 8.19,\n\t\t\t[Stat.StatMeleeHaste]: 4.17,\n\t\t\t[Stat.StatMana]: 0.04,\n\t\t\t[Stat.StatIntellect]: 0.67,\n\t\t\t[Stat.StatSpirit]: 0.08,\n\t\t\t[Stat.StatMP5]: 0.46,\n\t\t}, {\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default rotation settings.\n\t\trotationType: APLRotationType.TypeSimple,\n\t\tsimpleRotation: Presets.DefaultRotation,\n\t\t// Default talents.\n\t\ttalents: Presets.StandardTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\taspectOfTheLion: true,\n\t\t\tarcaneBrilliance: true,\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectRegular,\n\t\t\tbattleShout: TristateEffect.TristateEffectRegular,\n\t\t}),\n\n\t\tpartyBuffs: PartyBuffs.create({}),\n\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\tblessingOfWisdom: TristateEffect.TristateEffectRegular,\n\t\t\tboonOfBlackfathom: true,\n\t\t\tashenvalePvpBuff: true,\n\t\t\tsaygesFortune: SaygesFortune.SaygesDamage,\n\t\t}),\n\n\t\tdebuffs: Debuffs.create({\n\t\t\tjudgementOfWisdom: false,\n\t\t\tgiftOfArthas: false,\n\t\t\texposeArmor: TristateEffect.TristateEffectMissing,\n\t\t\tfaerieFire: false,\n\t\t\tsunderArmor: true,\n\t\t\tcurseOfRecklessness: false,\n\t\t\thomunculi: 0,\n\t\t\tcurseOfVulnerability: true,\n\t\t\tancientCorrosivePoison: 30,\n\t\t}),\n\n\t\tother: Presets.OtherDefaults,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: DruidInputs.FeralDruidRotationConfig,\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.IntellectBuff,\n\t\tBuffDebuffInputs.BlessingOfWisdom,\n\t\tBuffDebuffInputs.ManaSpringTotem,\n\t\tBuffDebuffInputs.JudgementOfWisdom,\n\t],\n  excludeBuffDebuffInputs: [\n\t\tWeaponImbue.ElementalSharpeningStone,\n\t\tWeaponImbue.DenseSharpeningStone,\n\t\tWeaponImbue.WildStrikes,\n\t\tBuffDebuffInputs.BleedDebuff,\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tDruidInputs.LatencyMs,\n\t\t\t// DruidInputs.AssumeBleedActive,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.StandardTalents,\n\t\t],\n\t\trotations: [\n\t\t\tPresets.SIMPLE_ROTATION_DEFAULT,\n\t\t\tPresets.APL_ROTATION_DEFAULT,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.BlankPreset,\n\t\t\tPresets.DefaultGear,\n\t\t],\n\t},\n\n\tautoRotation: (_player: Player<Spec.SpecFeralDruid>): APLRotation => {\n\t\treturn Presets.APL_ROTATION_DEFAULT.rotation.rotation!;\n\t},\n\n\tsimpleRotation: (player: Player<Spec.SpecFeralDruid>, simple: DruidRotation, cooldowns: Cooldowns): APLRotation => {\n\t\tlet [prepullActions, actions] = AplUtils.standardCooldownDefaults(cooldowns);\n\n\t\tconst preroarDuration = Math.min(simple.preroarDuration, 33.0);\n\t\tconst preRoar = APLPrepullAction.fromJsonString(`{\"action\":{\"activateAura\":{\"auraId\":{\"spellId\":407988}}},\"doAtValue\":{\"const\":{\"val\":\"-${(34.0 - preroarDuration).toFixed(2)}s\"}}}`);\n\t\tconst preTF = APLPrepullAction.fromJsonString(`{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":5217,\"rank\":1}}},\"doAtValue\":{\"const\":{\"val\":\"-3s\"}}}`);\n\t\tconst doRotation = APLAction.fromJsonString(`{\"catOptimalRotationAction\":{\"maxWaitTime\":${simple.maxWaitTime.toFixed(2)},\"minCombosForRip\":${simple.minCombosForRip.toFixed(0)},\"maintainFaerieFire\":${simple.maintainFaerieFire},\"useShredTrick\":${simple.useShredTrick}}}`);\n\n\t\tprepullActions.push(...[\n\t\t\tpreroarDuration > 0 ? preRoar: null,\n\t\t\tsimple.precastTigersFury ? preTF: null,\n\t\t].filter(a => a) as Array<APLPrepullAction>)\n\n\t\tactions.push(...[\n\t\t\tdoRotation,\n\t\t].filter(a => a) as Array<APLAction>)\n\n\t\treturn APLRotation.create({\n\t\t\tprepullActions: prepullActions,\n\t\t\tpriorityList: actions.map(action => APLListItem.create({\n\t\t\t\taction: action,\n\t\t\t}))\n\t\t});\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecFeralDruid,\n\t\t\ttooltip: specNames[Spec.SpecFeralDruid],\n\t\t\tdefaultName: 'Cat',\n\t\t\ticonUrl: getSpecIcon(Class.ClassDruid, 3),\n\n\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.DefaultGear.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.DefaultGear.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n})\n\nexport class FeralDruidSimUI extends IndividualSimUI<Spec.SpecFeralDruid> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecFeralDruid>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n\n\tcalcArpTarget(gear: Gear): number {\n\t\tlet arpTarget = 1399;\n\n\t\t// First handle ArP proc trinkets\n\t\tif (gear.hasTrinket(45931)) {\n\t\t\tarpTarget -= 751;\n\t\t} else if (gear.hasTrinket(40256)) {\n\t\t\tarpTarget -= 612;\n\t\t}\n\n\t\t// Then check for Executioner enchant\n\t\tconst weapon = gear.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\n\t\tif ((weapon != null) && (weapon!.enchant != null) && (weapon!.enchant!.effectId == 3225)) {\n\t\t\tarpTarget -= 120;\n\t\t}\n\n\t\treturn arpTarget;\n\t}\n\n\tcalcCritCap(gear: Gear): Stats {\n\t\tconst baseCritCapPercentage = 77.8; // includes 3% Crit debuff\n\t\tlet agiProcs = 0;\n\n\t\tif (gear.hasRelic(47668)) {\n\t\t\tagiProcs += 200;\n\t\t}\n\n\t\tif (gear.hasRelic(50456)) {\n\t\t\tagiProcs += 44*5;\n\t\t}\n\n\t\tif (gear.hasTrinket(47131) || gear.hasTrinket(47464)) {\n\t\t\tagiProcs += 510;\n\t\t}\n\n\t\tif (gear.hasTrinket(47115) || gear.hasTrinket(47303)) {\n\t\t\tagiProcs += 450;\n\t\t}\n\n\t\tif (gear.hasTrinket(44253) || gear.hasTrinket(42987)) {\n\t\t\tagiProcs += 300;\n\t\t}\n\n\t\treturn new Stats().withStat(Stat.StatMeleeCrit, (baseCritCapPercentage - agiProcs*1.1*1.06*1.02/83.33) * 45.91);\n\t}\n\n\tasync updateGear(gear: Gear): Promise<Stats> {\n\t\tthis.player.setGear(TypedEvent.nextEventID(), gear);\n\t\tawait this.sim.updateCharacterStats(TypedEvent.nextEventID());\n\t\treturn Stats.fromProto(this.player.getCurrentStats().finalStats);\n\t}\n\n\tdetectArpStackConfiguration(arpTarget: number): boolean {\n\t\tconst currentArp = Stats.fromProto(this.player.getCurrentStats().finalStats).getStat(Stat.StatArmorPenetration);\n\t\treturn (arpTarget > 1000) && (currentArp > 648) && (currentArp + 20 < arpTarget + 11);\n\t}\n}\n"],"names":["InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","actionId","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","innervateTarget","type","UnitType","Player","setValue","eventID","newValue","newOptions","UnitReference","create","Unknown","index","setSpecOptions","LatencyMs","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","InputHelpers.makeSpecOptionsBooleanInput","FeralDruidRotationConfig","inputs","InputHelpers.makeRotationNumberInput","float","positive","InputHelpers.makeRotationBooleanInput","BlankPreset","PresetUtils.makePresetGear","DefaultGear","Phase1Gear","APL_ROTATION_DEFAULT","PresetUtils.makePresetAPLRotation","DefaultApl","DefaultRotation","FeralDruidRotation","maintainFaerieFire","minCombosForRip","maxWaitTime","preroarDuration","precastTigersFury","useShredTrick","SIMPLE_ROTATION_DEFAULT","PresetUtils.makePresetSimpleRotation","Spec","SpecFeralDruid","StandardTalents","name","data","SavedTalents","talentsString","DefaultOptions","FeralDruidOptions","latencyMs","assumeBleedActive","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodSmokedSagefish","defaultPotion","Potions","ManaPotion","defaultConjured","Conjured","ConjuredMinorRecombobulator","mainHandImbue","WeaponImbue","BlackfathomSharpeningStone","agilityElixir","AgilityElixir","ElixirOfLesserAgility","strengthBuff","StrengthBuff","ElixirOfOgresStrength","boglingRoot","OtherDefaults","profession2","Profession","Leatherworking","SPEC_CONFIG","registerSpecConfig","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatFeralAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatMana","StatIntellect","StatSpirit","StatMP5","epPseudoStats","epReferenceStat","displayStats","StatHealth","defaults","gear","Presets.DefaultGear","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotationType","APLRotationType","TypeSimple","simpleRotation","Presets.DefaultRotation","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","aspectOfTheLion","arcaneBrilliance","giftOfTheWild","TristateEffect","TristateEffectRegular","battleShout","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfMight","TristateEffectImproved","blessingOfWisdom","boonOfBlackfathom","ashenvalePvpBuff","saygesFortune","SaygesFortune","SaygesDamage","debuffs","Debuffs","judgementOfWisdom","giftOfArthas","exposeArmor","TristateEffectMissing","faerieFire","sunderArmor","curseOfRecklessness","homunculi","curseOfVulnerability","ancientCorrosivePoison","other","Presets.OtherDefaults","playerIconInputs","rotationInputs","DruidInputs.FeralDruidRotationConfig","includeBuffDebuffInputs","BuffDebuffInputs.IntellectBuff","BuffDebuffInputs.BlessingOfWisdom","BuffDebuffInputs.ManaSpringTotem","BuffDebuffInputs.JudgementOfWisdom","excludeBuffDebuffInputs","ElementalSharpeningStone","DenseSharpeningStone","WildStrikes","BuffDebuffInputs.BleedDebuff","otherInputs","DruidInputs.LatencyMs","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","rotations","Presets.SIMPLE_ROTATION_DEFAULT","Presets.APL_ROTATION_DEFAULT","Presets.BlankPreset","autoRotation","_player","rotation","simple","cooldowns","prepullActions","actions","AplUtils.standardCooldownDefaults","Math","min","preRoar","APLPrepullAction","fromJsonString","toFixed","preTF","doRotation","APLAction","push","filter","a","APLRotation","priorityList","map","action","APLListItem","raidSimPresets","spec","tooltip","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassDruid","defaultFactionRaces","Faction","Race","RaceUnknown","Alliance","RaceNightElf","Horde","RaceTauren","defaultGear","FeralDruidSimUI","IndividualSimUI","constructor","parentElem","super","calcArpTarget","arpTarget","hasTrinket","weapon","getEquippedItem","ItemSlot","ItemSlotMainHand","enchant","effectId","calcCritCap","agiProcs","hasRelic","withStat","updateGear","this","setGear","TypedEvent","nextEventID","sim","updateCharacterStats","fromProto","getCurrentStats","finalStats","detectArpStackConfiguration","currentArp","getStat","StatArmorPenetration"],"mappings":"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"}