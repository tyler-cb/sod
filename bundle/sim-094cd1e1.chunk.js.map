{"version":3,"file":"sim-094cd1e1.chunk.js","sources":["../../../ui/warrior/inputs.ts","../../../ui/warrior/presets.ts","../../../ui/warrior/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\n\nimport {\n\tWarriorShout\n} from '../core/proto/warrior.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const StartingRage = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecWarrior>({\n\tfieldName: 'startingRage',\n\tlabel: 'Starting Rage',\n\tlabelTooltip: 'Initial rage at the start of each iteration.',\n});\n\nexport const StanceSnapshot = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecWarrior>({\n\tfieldName: 'stanceSnapshot',\n\tlabel: 'Stance Snapshot',\n\tlabelTooltip: 'Ability that is cast at the same time as stance swap will benefit from the bonus of the stance before the swap.',\n});\n\nexport const ShoutPicker = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\n\tfieldName: 'shout',\n\tactionId: () => ActionId.fromSpellId(6673),\n\tvalue: WarriorShout.WarriorShoutBattle,\n});\n","import {\n\tConsumes,\n\tDebuffs,\n\tFlask,\n\tFood,\n\tPotions,\n\tRaidBuffs,\n\tTristateEffect,\n\tWeaponImbue,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tWarriorShout,\n\tWarrior_Options as WarriorOptions,\n} from '../core/proto/warrior.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport BlankGear from './gear_sets/blank.gear.json';\nimport Phase1Gear from './gear_sets/phase_1.gear.json';\nimport Phase1DWGear from './gear_sets/phase_1_dw.gear.json';\n\nimport Phase1APL from './apls/phase_1.apl.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const GearBlank = PresetUtils.makePresetGear('Blank', BlankGear);\n\nexport const GearArmsPhase1 = PresetUtils.makePresetGear('P1 Arms 2H', Phase1Gear, { talentTree: 0 });\nexport const GearArmsDWPhase1 = PresetUtils.makePresetGear('P1 Arms DW', Phase1DWGear, { talentTree: 0 });\nexport const GearFuryPhase1 = PresetUtils.makePresetGear('P1 Fury', Phase1Gear, { talentTree: 1 });\n\nexport const GearArmsDefault = GearArmsPhase1;\nexport const GearFuryDefault = GearFuryPhase1;\n\nexport const APLPhase1 = PresetUtils.makePresetAPLRotation('P1 Preset', Phase1APL);\n\nexport const RotationArmsDefault = APLPhase1;\nexport const RotationFuryDefault = APLPhase1;\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\nexport const Talent25 = {\n\tname: 'Level 25',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '303220203-01',\n\t}),\n};\n\nexport const DefaultOptions = WarriorOptions.create({\n\tstartingRage: 0,\n\tuseRecklessness: true,\n\tshout: WarriorShout.WarriorShoutBattle,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskUnknown,\n\tfood: Food.FoodGrilledSquid,\n\tmainHandImbue: WeaponImbue.WildStrikes,\n\toffHandImbue: WeaponImbue.BlackfathomSharpeningStone,\n\tdefaultPotion: Potions.UnknownPotion,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tbattleShout: TristateEffect.TristateEffectImproved,\n\tdevotionAura: TristateEffect.TristateEffectImproved,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tleaderOfThePack: true,\n\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectRegular,\n})\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\tfaerieFire: true,\n\tmangle: true,\n\tsunderArmor: true,\n})\n","import {\n\tClass,\n\tFaction,\n\tIndividualBuffs,\n\tPartyBuffs,\n\tRace,\n\tSpec,\n\tStat, PseudoStat,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport {\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as WarriorInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecWarrior, {\n\tcssClass: 'warrior-sim-ui',\n\tcssScheme: 'warrior',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t\t\"Rage conversion is a bit off for non 60s\",\n\t\t\"Prot oriented Runes (Devastate and Sword and Board) are not yet implemented\",\n\t\t\"Head and Bracers Runes are not yet implemented\"\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmor,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t\tPseudoStat.PseudoStatOffHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmor,\n\t],\n\tmodifyDisplayStats: (_: Player<Spec.SpecWarrior>) => {\n\t\tlet stats = new Stats();\n\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.GearArmsDefault.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatStrength]: 2.72,\n\t\t\t[Stat.StatAgility]: 1.82,\n\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t[Stat.StatExpertise]: 2.55,\n\t\t\t[Stat.StatMeleeHit]: 0.79,\n\t\t\t[Stat.StatMeleeCrit]: 2.12,\n\t\t\t[Stat.StatMeleeHaste]: 1.72,\n\t\t\t[Stat.StatArmorPenetration]: 2.17,\n\t\t\t[Stat.StatArmor]: 0.03,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 6.29,\n\t\t\t[PseudoStat.PseudoStatOffHandDps]: 3.58,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.Talent25.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tWarriorInputs.ShoutPicker,\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tWarriorInputs.StartingRage,\n\t\t\tWarriorInputs.StanceSnapshot,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: true,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.Talent25\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.APLPhase1,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.GearBlank,\n\t\t\tPresets.GearArmsPhase1,\n\t\t\tPresets.GearArmsDWPhase1,\n\t\t\tPresets.GearFuryPhase1,\n\t\t],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecWarrior>): APLRotation => {\n\t\tconst talentTree = player.getTalentTree();\n\t\tif (talentTree == 0) {\n\t\t\treturn Presets.RotationArmsDefault.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.RotationFuryDefault.rotation.rotation!;\n\t\t}\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecWarrior,\n\t\t\ttooltip: 'Arms Warrior',\n\t\t\tdefaultName: 'Arms',\n\t\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 0),\n\n\t\t\ttalents: Presets.Talent25.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearArmsDefault.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearArmsDefault.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecWarrior,\n\t\t\ttooltip: 'Fury Warrior',\n\t\t\tdefaultName: 'Fury',\n\t\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 1),\n\n\t\t\ttalents: Presets.Talent25.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearFuryDefault.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearFuryDefault.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class WarriorSimUI extends IndividualSimUI<Spec.SpecWarrior> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecWarrior>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["StartingRage","InputHelpers.makeSpecOptionsNumberInput","fieldName","label","labelTooltip","StanceSnapshot","InputHelpers.makeSpecOptionsBooleanInput","ShoutPicker","InputHelpers.makeSpecOptionsBooleanIconInput","actionId","ActionId","fromSpellId","value","WarriorShout","WarriorShoutBattle","GearBlank","PresetUtils.makePresetGear","GearArmsPhase1","Phase1Gear","talentTree","GearArmsDWPhase1","Phase1DWGear","GearFuryPhase1","GearArmsDefault","GearFuryDefault","APLPhase1","PresetUtils.makePresetAPLRotation","Phase1APL","RotationArmsDefault","RotationFuryDefault","Talent25","name","data","SavedTalents","create","talentsString","DefaultOptions","WarriorOptions","startingRage","useRecklessness","shout","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodGrilledSquid","mainHandImbue","WeaponImbue","WildStrikes","offHandImbue","BlackfathomSharpeningStone","defaultPotion","Potions","UnknownPotion","DefaultRaidBuffs","RaidBuffs","battleShout","TristateEffect","TristateEffectImproved","devotionAura","giftOfTheWild","leaderOfThePack","stoneskinTotem","strengthOfEarthTotem","TristateEffectRegular","DefaultDebuffs","Debuffs","curseOfWeakness","faerieFire","mangle","sunderArmor","SPEC_CONFIG","registerSpecConfig","Spec","SpecWarrior","cssClass","cssScheme","knownIssues","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmor","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","modifyDisplayStats","_","talents","Stats","defaults","gear","Presets.GearArmsDefault","epWeights","fromMap","StatExpertise","StatArmorPenetration","consumes","Presets.DefaultConsumes","Presets.Talent25","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Presets.DefaultDebuffs","playerIconInputs","WarriorInputs.ShoutPicker","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","inputs","WarriorInputs.StartingRage","WarriorInputs.StanceSnapshot","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","rotations","Presets.APLPhase1","Presets.GearBlank","Presets.GearArmsPhase1","Presets.GearArmsDWPhase1","Presets.GearFuryPhase1","autoRotation","player","getTalentTree","Presets.RotationArmsDefault","rotation","Presets.RotationFuryDefault","raidSimPresets","spec","tooltip","defaultName","iconUrl","getSpecIcon","Class","ClassWarrior","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceOrc","defaultGear","Presets.GearFuryDefault","WarriorSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}