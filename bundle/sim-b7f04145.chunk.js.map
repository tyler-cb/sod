{"version":3,"file":"sim-b7f04145.chunk.js","sources":["../../../ui/elemental_shaman/presets.ts","../../../ui/elemental_shaman/sim.ts"],"sourcesContent":["import {\n  Consumes,\n  Debuffs,\n  Flask,\n  Food,\n  Profession,\n  RaidBuffs,\n  TristateEffect,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n  AirTotem,\n  EarthTotem,\n  ElementalShaman_Options as ElementalShamanOptions,\n  FireTotem,\n  ShamanImbue,\n  ShamanShield,\n  ShamanTotems,\n  WaterTotem,\n} from '../core/proto/shaman.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport BlankGear from './gear_sets/blank.gear.json';\nimport Phase1Gear from './gear_sets/phase_1.gear.json';\n\nimport Phase1APL from './apls/phase_1.apl.json';\nimport Phase1AGAPL from './apls/phase_1_ag.apl.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const GearBlank = PresetUtils.makePresetGear('Blank', BlankGear);\nexport const GearPhase1 = PresetUtils.makePresetGear('Phase 1', Phase1Gear);\n\nexport const DefaultGear = GearPhase1;\n\nexport const APLPhase1 = PresetUtils.makePresetAPLRotation('Phase 1', Phase1APL);\nexport const APLPhase1AG = PresetUtils.makePresetAPLRotation('Phase 1 (AG)', Phase1AGAPL);\n\nexport const DefaultAPL = APLPhase1;\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\nexport const TalentsPhase1 = {\n  name: 'Phase 1',\n  data: SavedTalents.create({\n    talentsString: '25003105',\n  }),\n};\n\nexport const TalentsPhase2 = {\n  name: 'Phase 2',\n  data: SavedTalents.create({\n    talentsString: '350031550002151',\n  }),\n};\n\nexport const DefaultTalents = TalentsPhase1;\n\nexport const DefaultOptions = ElementalShamanOptions.create({\n  shield: ShamanShield.LightningShield,\n  imbueMh: ShamanImbue.RockbiterWeapon,\n\timbueOh: ShamanImbue.RockbiterWeapon,\n  totems: ShamanTotems.create({\n    earth: EarthTotem.StrengthOfEarthTotem,\n    fire: FireTotem.SearingTotem,\n    water: WaterTotem.HealingStreamTotem,\n    air: AirTotem.WindfuryTotem,\n  }),\n});\n\nexport const DefaultConsumes = Consumes.create({\n  flask: Flask.FlaskUnknown,\n\tfood: Food.FoodUnknown,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\taspectOfTheLion: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\tleaderOfThePack: true,\n\tmoonkinAura: true,\n\tdivineSpirit: true,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfElements: true,\n  improvedScorch: true,\n});\n\nexport const OtherDefaults = {\n  distanceFromTarget: 20,\n  profession1: Profession.Engineering,\n  profession2: Profession.Tailoring,\n  nibelungAverageCasts: 11,\n}\n","import { ShamanImbueInputMH, ShamanImbueInputOH } from '../core/components/inputs/shaman_imbues.js';\nimport { ShamanShieldInput } from '../core/components/inputs/shaman_shields.js';\nimport {\n\tClass,\n\tFaction,\n\tIndividualBuffs,\n\tPartyBuffs,\n\tRace,\n\tSpec,\n\tStat,\n} from '../core/proto/common.js';\nimport {\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\n// import * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecElementalShaman, {\n\tcssClass: 'elemental-shaman-sim-ui',\n\tcssScheme: 'shaman',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\twarnings: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatSpellPower,\n\t\tStat.StatFirePower,\n\t\tStat.StatNaturePower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\tmodifyDisplayStats: (player: Player<Spec.SpecElementalShaman>) => {\n\t\tlet stats = new Stats();\n\t\tstats = stats.addStat(Stat.StatSpellCrit,\n\t\t\tplayer.getTalents().tidalMastery * 1 * Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE);\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 0.22,\n\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t[Stat.StatFirePower]: 0.48,\n\t\t\t[Stat.StatNaturePower]: 0.52,\n\t\t\t[Stat.StatSpellHit]: 4.52,\n\t\t\t[Stat.StatSpellCrit]: 1.01,\n\t\t\t[Stat.StatSpellHaste]: .87,\n\t\t\t[Stat.StatMP5]: 0.08,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t}),\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tShamanShieldInput<Spec.SpecElementalShaman>(),\n\t\tShamanImbueInputMH<Spec.SpecElementalShaman>(),\n\t\tShamanImbueInputOH<Spec.SpecElementalShaman>(),\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.TankAssignment,\n\t\t],\n\t},\n\tcustomSections: [\n\t\t// TotemsSection,\n\t],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.TalentsPhase1,\n\t\t\tPresets.TalentsPhase2,\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.APLPhase1,\n\t\t\tPresets.APLPhase1AG,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.GearBlank,\n\t\t\tPresets.GearPhase1,\n\t\t],\n\t},\n\n\tautoRotation: (_: Player<Spec.SpecElementalShaman>): APLRotation => {\n\t\treturn Presets.DefaultAPL.rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecElementalShaman,\n\t\t\ttooltip: specNames[Spec.SpecElementalShaman],\n\t\t\tdefaultName: 'Elemental',\n\t\t\ticonUrl: getSpecIcon(Class.ClassShaman, 0),\n\n\t\t\ttalents: Presets.DefaultTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceUnknown,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.DefaultGear.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.DefaultGear.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n})\n\nexport class ElementalShamanSimUI extends IndividualSimUI<Spec.SpecElementalShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecElementalShaman>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["GearBlank","PresetUtils.makePresetGear","GearPhase1","Phase1Gear","DefaultGear","APLPhase1","PresetUtils.makePresetAPLRotation","Phase1APL","APLPhase1AG","Phase1AGAPL","DefaultAPL","TalentsPhase1","name","data","SavedTalents","create","talentsString","TalentsPhase2","DefaultTalents","DefaultOptions","ElementalShamanOptions","shield","ShamanShield","LightningShield","imbueMh","ShamanImbue","RockbiterWeapon","imbueOh","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","fire","FireTotem","SearingTotem","water","WaterTotem","HealingStreamTotem","air","AirTotem","WindfuryTotem","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodUnknown","DefaultRaidBuffs","RaidBuffs","aspectOfTheLion","giftOfTheWild","TristateEffect","TristateEffectImproved","arcaneBrilliance","leaderOfThePack","moonkinAura","divineSpirit","DefaultDebuffs","Debuffs","curseOfElements","improvedScorch","OtherDefaults","distanceFromTarget","profession1","Profession","Engineering","profession2","Tailoring","nibelungAverageCasts","SPEC_CONFIG","registerSpecConfig","Spec","SpecElementalShaman","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatIntellect","StatSpellPower","StatFirePower","StatNaturePower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","modifyDisplayStats","player","stats","Stats","addStat","getTalents","tidalMastery","Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE","talents","defaults","gear","Presets.DefaultGear","epWeights","fromMap","consumes","Presets.DefaultConsumes","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","debuffs","Presets.DefaultDebuffs","playerIconInputs","ShamanShieldInput","ShamanImbueInputMH","ShamanImbueInputOH","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","inputs","OtherInputs.TankAssignment","customSections","encounterPicker","showExecuteProportion","presets","Presets.TalentsPhase1","Presets.TalentsPhase2","rotations","Presets.APLPhase1","Presets.APLPhase1AG","Presets.GearBlank","Presets.GearPhase1","autoRotation","_","Presets.DefaultAPL","rotation","raidSimPresets","spec","tooltip","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassShaman","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","Horde","RaceOrc","defaultGear","ElementalShamanSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}