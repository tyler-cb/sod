import{o as e,p as t,q as a,s as i,t as s,m as r,a as n,u as o,r as l,b as c,v as d,B as u,M as p,J as f,l as m,T as S,n as h,I as g}from"./preset_utils-8140e85e.chunk.js";import{A as b,ac as T,ad as k,dC as y,S as F,dh as A,dD as w,q as C,bB as P,bC as I,bF as M,bz as R,bK as x,bD as v,bE as O,E as D,a as E,O as B,aa as H,dq as N,c as W,o as L,bL as j,ab as U,dd as q,d9 as V,t as $,de as J,aC as G,j as _,C as z,aq as K,a$ as Q,x as X,T as Y}from"./detailed_results-b97d85b3.chunk.js";import{s as Z}from"./apl_utils-ca333d52.chunk.js";e({fieldName:"innervateTarget",actionId:()=>b.fromSpellId(29166),extraCssClasses:["within-raid-sim-hide"],getValue:e=>e.getSpecOptions().innervateTarget?.type==T.Player,setValue:(e,t,a)=>{const i=t.getSpecOptions();i.innervateTarget=k.create({type:a?T.Player:T.Unknown,index:0}),t.setSpecOptions(e,i)}});const ee=t({fieldName:"latencyMs",label:"Latency",labelTooltip:"Player latency, in milliseconds. Adds a delay to actions that cannot be spell queued."});a({fieldName:"assumeBleedActive",label:"Assume Bleed Always Active",labelTooltip:"Assume bleed always exists for 'Rend and Tear' calculations. Otherwise will only calculate based on own rip/rake/lacerate.",extraCssClasses:["within-raid-sim-hide"]});const te={inputs:[i({fieldName:"minCombosForRip",label:"Min Rip CP",labelTooltip:"Combo Point threshold for allowing a Rip cast",float:!1,positive:!0}),i({fieldName:"maxWaitTime",label:"Max Wait Time",labelTooltip:"Max seconds to wait for an Energy tick to cast rather than powershifting",float:!0,positive:!0}),i({fieldName:"preroarDuration",label:"Pre-Roar Duration",labelTooltip:"Seconds remaining on a prior Savage Roar buff at the start of the pull",float:!0,positive:!0}),s({fieldName:"maintainFaerieFire",label:"Maintain Faerie Fire",labelTooltip:"If checked, bundle Faerie Fire refreshes with powershifts. Ignored if an external Faerie Fire debuff is selected in settings."}),s({fieldName:"precastTigersFury",label:"Pre-cast Tiger's Fury",labelTooltip:"If checked, model a pre-pull Tiger's Fury cast 3 seconds before initiating combat."}),s({fieldName:"useShredTrick",label:"Use Shred Trick",labelTooltip:'If checked, enable the "Shred trick" micro-optimization. This should only be used on short fight lengths with full powershifting uptime.'})]},ae={items:[{id:211510},{id:209422},{id:209692},{id:213087,enchant:247},{id:211512,enchant:847,rune:407977},{id:209524,enchant:823},{id:211423,rune:407995},{id:209421},{id:10410,rune:407988},{id:211511,enchant:247},{id:20439},{id:6321},{id:211449},{id:4381},{id:209577,enchant:723},{},{id:209576}]},ie={type:"TypeAPL",prepullActions:[{action:{activateAura:{auraId:{spellId:407988}}},doAtValue:{const:{val:"-8s"}}}],priorityList:[{action:{autocastOtherCooldowns:{}}},{action:{catOptimalRotationAction:{maxWaitTime:2,minCombosForRip:3}}}]},se=r("Blank",{items:[]}),re=r("Phase 1",ae),ne=n("APL Default",ie),oe=y.create({maintainFaerieFire:!1,minCombosForRip:3,maxWaitTime:2,preroarDuration:26,precastTigersFury:!1,useShredTrick:!1}),le=o("Simple Default",F.SpecFeralDruid,oe),ce={name:"Standard",data:A.create({talentsString:"500005001--05"})},de=w.create({latencyMs:100,assumeBleedActive:!0}),ue=C.create({flask:P.FlaskUnknown,food:I.FoodSmokedSagefish,defaultPotion:M.ManaPotion,defaultConjured:R.ConjuredMinorRecombobulator,mainHandImbue:x.BlackfathomSharpeningStone,agilityElixir:v.ElixirOfLesserAgility,strengthBuff:O.ElixirOfOgresStrength,boglingRoot:!0}),pe={profession2:D.Leatherworking},fe=l(F.SpecFeralDruid,{cssClass:"feral-druid-sim-ui",cssScheme:"druid",knownIssues:[],warnings:[],epStats:[E.StatStrength,E.StatAgility,E.StatAttackPower,E.StatFeralAttackPower,E.StatMeleeHit,E.StatMeleeCrit,E.StatMeleeHaste,E.StatMana,E.StatIntellect,E.StatSpirit,E.StatMP5],epPseudoStats:[],epReferenceStat:E.StatAttackPower,displayStats:[E.StatHealth,E.StatStrength,E.StatAgility,E.StatAttackPower,E.StatFeralAttackPower,E.StatMeleeHit,E.StatMeleeCrit,E.StatMeleeHaste,E.StatMana,E.StatIntellect,E.StatSpirit,E.StatMP5],defaults:{gear:re.gear,epWeights:c.fromMap({[E.StatStrength]:2.2,[E.StatAgility]:2.02,[E.StatAttackPower]:1,[E.StatFeralAttackPower]:1,[E.StatMeleeHit]:8.21,[E.StatMeleeCrit]:8.19,[E.StatMeleeHaste]:4.17,[E.StatMana]:.04,[E.StatIntellect]:.67,[E.StatSpirit]:.08,[E.StatMP5]:.46},{}),consumes:ue,rotationType:B.TypeSimple,simpleRotation:oe,talents:ce.data,specOptions:de,raidBuffs:H.create({aspectOfTheLion:!0,arcaneBrilliance:!0,giftOfTheWild:N.TristateEffectRegular,battleShout:N.TristateEffectRegular}),partyBuffs:W.create({}),individualBuffs:L.create({blessingOfMight:N.TristateEffectImproved,blessingOfWisdom:N.TristateEffectRegular,boonOfBlackfathom:!0,ashenvalePvpBuff:!0,saygesFortune:j.SaygesDamage}),debuffs:U.create({judgementOfWisdom:!1,giftOfArthas:!1,exposeArmor:N.TristateEffectMissing,faerieFire:!1,sunderArmor:!0,curseOfRecklessness:!1,homunculi:0,curseOfVulnerability:!0,ancientCorrosivePoison:30}),other:pe},playerIconInputs:[],rotationInputs:te,includeBuffDebuffInputs:[d,u,p,f],excludeBuffDebuffInputs:[x.ElementalSharpeningStone,x.DenseSharpeningStone,x.WildStrikes,m],otherInputs:{inputs:[ee,S,h]},encounterPicker:{showExecuteProportion:!1},presets:{talents:[ce],rotations:[le,ne],gear:[se,re]},autoRotation:e=>ne.rotation.rotation,simpleRotation:(e,t,a)=>{let[i,s]=Z(a);const r=Math.min(t.preroarDuration,33),n=q.fromJsonString(`{"action":{"activateAura":{"auraId":{"spellId":407988}}},"doAtValue":{"const":{"val":"-${(34-r).toFixed(2)}s"}}}`),o=q.fromJsonString('{"action":{"castSpell":{"spellId":{"spellId":5217,"rank":1}}},"doAtValue":{"const":{"val":"-3s"}}}'),l=V.fromJsonString(`{"catOptimalRotationAction":{"maxWaitTime":${t.maxWaitTime.toFixed(2)},"minCombosForRip":${t.minCombosForRip.toFixed(0)},"maintainFaerieFire":${t.maintainFaerieFire},"useShredTrick":${t.useShredTrick}}}`);return i.push(...[r>0?n:null,t.precastTigersFury?o:null].filter((e=>e))),s.push(...[l].filter((e=>e))),$.create({prepullActions:i,priorityList:s.map((e=>J.create({action:e})))})},raidSimPresets:[{spec:F.SpecFeralDruid,tooltip:G[F.SpecFeralDruid],defaultName:"Cat",iconUrl:_(z.ClassDruid,3),talents:ce.data,specOptions:de,consumes:ue,defaultFactionRaces:{[K.Unknown]:Q.RaceUnknown,[K.Alliance]:Q.RaceNightElf,[K.Horde]:Q.RaceTauren},defaultGear:{[K.Unknown]:{},[K.Alliance]:{1:re.gear},[K.Horde]:{1:re.gear}}}]});class me extends g{constructor(e,t){super(e,t,fe)}calcArpTarget(e){let t=1399;e.hasTrinket(45931)?t-=751:e.hasTrinket(40256)&&(t-=612);const a=e.getEquippedItem(X.ItemSlotMainHand);return null!=a&&null!=a.enchant&&3225==a.enchant.effectId&&(t-=120),t}calcCritCap(e){let t=0;return e.hasRelic(47668)&&(t+=200),e.hasRelic(50456)&&(t+=220),(e.hasTrinket(47131)||e.hasTrinket(47464))&&(t+=510),(e.hasTrinket(47115)||e.hasTrinket(47303))&&(t+=450),(e.hasTrinket(44253)||e.hasTrinket(42987))&&(t+=300),(new c).withStat(E.StatMeleeCrit,45.91*(77.8-1.1*t*1.06*1.02/83.33))}async updateGear(e){return this.player.setGear(Y.nextEventID(),e),await this.sim.updateCharacterStats(Y.nextEventID()),c.fromProto(this.player.getCurrentStats().finalStats)}detectArpStackConfiguration(e){const t=c.fromProto(this.player.getCurrentStats().finalStats).getStat(E.StatArmorPenetration);return e>1e3&&t>648&&t+20<e+11}}export{me as F};
//# sourceMappingURL=sim-a9d0b385.chunk.js.map
