var t=Object.defineProperty,e=(e,a,s)=>(((e,a,s)=>{a in e?t(e,a,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[a]=s})(e,"symbol"!=typeof a?a+"":a,s),s);import{T as a}from"./index-50a990e3.chunk.js";import{S as s,dZ as i,i as r,aq as n,bi as l,T as o,e as c,f as d,d_ as h,g as m,C as p,n as u,E as f,a1 as g,_ as y,bv as I,d$ as P,e0 as S,A as E,dK as b,dO as D,dH as k,dw as v,dW as C,dy as w,e1 as T,s as R,aH as U,e2 as x,ae as O,e3 as L,I as A,ad as B,Z as M,e4 as W,z as F,e5 as H,aG as $,aC as j,bN as q,a$ as N,e6 as V,bW as J,bM as z,F as G,bj as _,e7 as K,a6 as X,d as Z,b1 as Q,b2 as Y,R as tt,ac as et,dl as at,dm as st,dq as it}from"./detailed_results-b97d85b3.chunk.js";import{L as rt,N as nt,O as lt,P as ot,Q as ct,U as dt,V as ht,W as mt,X as pt,Y as ut,Z as ft,_ as gt,$ as yt,a0 as It,a1 as Pt,a2 as St,a3 as Et,S as bt,a4 as Dt}from"./preset_utils-8140e85e.chunk.js";import{B as kt}from"./sim-66083199.chunk.js";import{F as vt}from"./sim-a9d0b385.chunk.js";import{F as Ct}from"./sim-bd587ffa.chunk.js";import{R as wt}from"./sim-9d3ed5e4.chunk.js";import{E as Tt}from"./sim-b7f04145.chunk.js";import{E as Rt}from"./sim-5fd04617.chunk.js";import{R as Ut}from"./sim-87e2d995.chunk.js";import{H as xt}from"./sim-a42c9a10.chunk.js";import{M as Ot}from"./sim-7cb3299d.chunk.js";import{R as Lt}from"./sim-1394eb33.chunk.js";import{H as At}from"./sim-8e53b13a.chunk.js";import{P as Bt}from"./sim-787a59ed.chunk.js";import{R as Mt}from"./sim-df7eb6f1.chunk.js";import{H as Wt}from"./sim-41099ea8.chunk.js";import{S as Ft}from"./sim-78958527.chunk.js";import{W as Ht}from"./sim-094cd1e1.chunk.js";import{P as $t}from"./sim-ff788282.chunk.js";import{W as jt}from"./sim-841b88ee.chunk.js";import{T as qt}from"./sim-78b1f873.chunk.js";import"./apl_utils-ca333d52.chunk.js";import"./shaman_shields-931a134e.chunk.js";const Nt={[s.SpecBalanceDruid]:(t,e)=>new kt(t,e),[s.SpecFeralDruid]:(t,e)=>new vt(t,e),[s.SpecFeralTankDruid]:(t,e)=>new Ct(t,e),[s.SpecRestorationDruid]:(t,e)=>new wt(t,e),[s.SpecElementalShaman]:(t,e)=>new Tt(t,e),[s.SpecEnhancementShaman]:(t,e)=>new Rt(t,e),[s.SpecRestorationShaman]:(t,e)=>new Ut(t,e),[s.SpecHunter]:(t,e)=>new xt(t,e),[s.SpecMage]:(t,e)=>new Ot(t,e),[s.SpecRogue]:(t,e)=>new Lt(t,e),[s.SpecHolyPaladin]:(t,e)=>new At(t,e),[s.SpecProtectionPaladin]:(t,e)=>new Bt(t,e),[s.SpecRetributionPaladin]:(t,e)=>new Mt(t,e),[s.SpecHealingPriest]:(t,e)=>new Wt(t,e),[s.SpecShadowPriest]:(t,e)=>new Ft(t,e),[s.SpecWarrior]:(t,e)=>new Ht(t,e),[s.SpecProtectionWarrior]:(t,e)=>new $t(t,e),[s.SpecWarlock]:(t,e)=>new jt(t,e),[s.SpecTankWarlock]:(t,e)=>new qt(t,e)},Vt=i.map(rt).map((t=>t.raidSimPresets)).flat(),Jt=[...new Set(Vt.map((t=>t.spec)))],zt=-1;class Gt extends r{constructor(t,a){super(t,"raid-picker-root"),e(this,"raidSimUI"),e(this,"raid"),e(this,"partyPickers"),e(this,"newPlayerPicker"),e(this,"currentDragPlayer",null),e(this,"currentDragPlayerFromIndex",zt),e(this,"currentDragType",1),e(this,"currentDragParty",null),this.raidSimUI=a,this.raid=a.sim.raid;const s=document.createElement("div");s.classList.add("raid-controls"),this.rootElem.appendChild(s),this.newPlayerPicker=new Zt(this.rootElem,this),new nt(s,this.raidSimUI.sim.raid,{label:"Raid Size",labelTooltip:"Number of players participating in the sim.",values:[{name:"5",value:1},{name:"10",value:2},{name:"25",value:5},{name:"40",value:8}],changedEvent:t=>t.numActivePartiesChangeEmitter,getValue:t=>t.getNumActiveParties(),setValue:(t,e,a)=>{e.setNumActiveParties(t,a)}}),new nt(s,this.newPlayerPicker,{label:"Default Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:n.Alliance},{name:"Horde",value:n.Horde}],changedEvent:()=>this.raid.sim.factionChangeEmitter,getValue:()=>this.raid.sim.getFaction(),setValue:(t,e,a)=>{this.raid.sim.setFaction(t,a)}});const i=Math.min(...Vt.map((t=>Math.max(...Object.keys(t.defaultGear[n.Alliance]).map((t=>parseInt(t)))))));new nt(s,this.newPlayerPicker,{label:"Default Gear",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[...Array(i).keys()].map((t=>{const e=t+1;return{name:"Phase "+e,value:e}})),changedEvent:()=>this.raid.sim.phaseChangeEmitter,getValue:()=>this.raid.sim.getPhase(),setValue:(t,e,a)=>{this.raid.sim.setPhase(t,a)}});const r=document.createElement("div");r.classList.add("parties-container"),this.rootElem.appendChild(r),this.partyPickers=this.raid.getParties().map(((t,e)=>new _t(r,t,e,this)));const l=()=>{this.partyPickers.forEach((t=>{t.index<this.raidSimUI.sim.raid.getNumActiveParties()?t.rootElem.classList.add("active"):t.rootElem.classList.remove("active")}))};this.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(l),l(),this.rootElem.ondragend=()=>{this.clearDragPlayer(),this.clearDragParty()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(t){return this.partyPickers[Math.floor(t/lt)].playerPickers[t%lt]}getPlayerPickers(){return[...new Array(25).keys()].map((t=>this.getPlayerPicker(t)))}setDragPlayer(t,e,a){if(this.clearDragPlayer(),this.currentDragPlayer=t,this.currentDragPlayerFromIndex=e,this.currentDragType=a,e!=zt){this.getPlayerPicker(e).rootElem.classList.add("dragfrom")}}clearDragPlayer(){if(this.currentDragPlayerFromIndex!=zt){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragfrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=zt,this.currentDragType=1}setDragParty(t){this.currentDragParty=t,t.rootElem.classList.add("dragfrom")}clearDragParty(){this.currentDragParty&&(this.currentDragParty.rootElem.classList.remove("dragfrom"),this.currentDragParty=null)}}class _t extends r{constructor(t,a,s,i){super(t,"party-picker-root"),e(this,"party"),e(this,"index"),e(this,"raidPicker"),e(this,"playerPickers"),this.party=a,this.index=s,this.raidPicker=i,this.rootElem.setAttribute("draggable","true"),this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<label class="party-label form-label">Group ${s+1}</label>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const r=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(lt).keys()].map((t=>new Kt(r,this,t)));const n=this.rootElem.getElementsByClassName("party-results-dps")[0],c=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),a=t?.simResult.raidMetrics.parties[this.index]?.dps.avg||0,s=e?.simResult.raidMetrics.parties[this.index]?.dps.avg||0;if(0==a&&0==s)return n.textContent="",void(c.textContent="");n.textContent=`${a.toFixed(1)} DPS`,e?l(c,s,a,1):c.textContent=""})),this.rootElem.ondragstart=t=>{t.target==this.rootElem&&(t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all",this.raidPicker.setDragParty(this))};let d=0;this.rootElem.ondragenter=t=>{t.preventDefault(),this.raidPicker.currentDragParty&&(d++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=t=>{t.preventDefault(),this.raidPicker.currentDragParty&&(d--,d<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=t=>{t.preventDefault()},this.rootElem.ondrop=t=>{if(!this.raidPicker.currentDragParty)return;t.preventDefault(),d=0,this.rootElem.classList.remove("dragto");const e=o.nextEventID();o.freezeAllAndDo((()=>{const t=this.raidPicker.currentDragParty;for(let a=0;a<lt;a++){const s=t.playerPickers[a],i=this.playerPickers[a],r=s.player,n=i.player;s.setPlayer(e,n,3),i.setPlayer(e,r,3)}})),this.raidPicker.clearDragParty()}}}class Kt extends r{constructor(t,a,s){super(t,"player-picker-root"),e(this,"index"),e(this,"raidIndex"),e(this,"player"),e(this,"partyPicker"),e(this,"raidPicker"),e(this,"labelElem"),e(this,"iconElem"),e(this,"nameElem"),e(this,"resultsElem"),e(this,"dpsResultElem"),e(this,"referenceDeltaElem"),this.index=s,this.raidIndex=a.index*lt+s,this.player=null,this.partyPicker=a,this.raidPicker=a.raidPicker,this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null,this.rootElem.classList.add("player"),this.partyPicker.party.compChangeEmitter.on((t=>{const e=this.partyPicker.party.getPlayer(this.index);e!=this.player&&this.setPlayer(t,e,0)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),a=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,s=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;this.player&&(this.resultsElem?.classList.remove("hide"),this.dpsResultElem.textContent=`${a.toFixed(1)} DPS`,e&&l(this.referenceDeltaElem,s,a,1))}));let i=0;this.rootElem.ondragenter=t=>{t.preventDefault(),this.raidPicker.currentDragParty||(i++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=t=>{t.preventDefault(),this.raidPicker.currentDragParty||(i--,i<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=t=>t.preventDefault(),this.rootElem.ondrop=t=>{if(this.raidPicker.currentDragParty)return;var e=t.dataTransfer.getData("text/plain");t.preventDefault(),i=0,this.rootElem.classList.remove("dragto");const a=o.nextEventID();o.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==e.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const t=this.raidPicker.currentDragType;if(this.raidPicker.currentDragPlayerFromIndex!=zt){const e=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);3==t?e.setPlayer(a,this.player,t):2==t&&e.setPlayer(a,null,t)}else if(null==this.raidPicker.currentDragPlayer){const t=atob(e),i=new Uint8Array(t.length);for(let e=0;e<i.length;e++)i[e]=t.charCodeAt(e);const r=c.fromBinary(i);var s=new ot(d(r),this.raidPicker.raidSimUI.sim);s.fromProto(a,r),this.raidPicker.currentDragPlayer=s}4==t?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),t):this.setPlayer(a,this.raidPicker.currentDragPlayer,t),this.raidPicker.clearDragPlayer()}))},this.update()}setPlayer(t,e,a){e!=this.player&&(o.freezeAllAndDo((()=>{this.player=e,e?(this.partyPicker.party.setPlayer(t,this.index,e),1==a&&function(t,e,a){if(g(e.spec)){const s=a.getTanks(),i=s.findIndex((t=>null==a.getPlayerFromUnitReference(t)));-1==i?s.length<3&&a.setTanks(t,s.concat([e.makeUnitReference()])):(s[i]=e.makeUnitReference(),a.setTanks(t,s))}if(e.spec==s.SpecBalanceDruid){const a=e.getSpecOptions();a.innervateTarget=y(e.getRaidIndex()),e.setSpecOptions(t,a)}}(t,e,this.raidPicker.raid)):(this.partyPicker.party.setPlayer(t,this.index,e),this.partyPicker.party.compChangeEmitter.emit(t))})),this.update())}update(){if(null==this.player)this.rootElem.className="player-picker-root player",this.rootElem.innerHTML="",this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null;else{const t=h(this.player.getClass());this.rootElem.className=`player-picker-root player bg-${t}-dampened`,this.rootElem.innerHTML=`\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t<img class="player-icon" src="${this.player.getSpecIcon()}" draggable="true" />\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass="player-name text-${t}"\n\t\t\t\t\t\t\ttype="text"\n\t\t\t\t\t\t\tvalue="${this.player.getName()}"\n\t\t\t\t\t\t\tspellcheck="false"\n\t\t\t\t\t\t\tmaxlength="15"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class="player-results hide">\n\t\t\t\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="player-options">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-edit"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Edit"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-edit fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-copy link-warning"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Drag to Copy"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-copy fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-delete link-danger"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Delete"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-times fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`,this.labelElem=this.rootElem.querySelector(".player-label"),this.iconElem=this.rootElem.querySelector(".player-icon"),this.nameElem=this.rootElem.querySelector(".player-name"),this.resultsElem=this.rootElem.querySelector(".player-results"),this.dpsResultElem=this.rootElem.querySelector(".player-results-dps"),this.referenceDeltaElem=this.rootElem.querySelector(".player-results-reference-delta"),this.bindPlayerEvents()}}bindPlayerEvents(){this.nameElem?.addEventListener("input",(t=>{this.player?.setName(o.nextEventID(),this.nameElem?.value||"")})),this.nameElem?.addEventListener("mousedown",(t=>{this.partyPicker.rootElem.setAttribute("draggable","false")})),this.nameElem?.addEventListener("mouseup",(t=>{this.partyPicker.rootElem.setAttribute("draggable","true")}));const t="Unnamed";this.nameElem?.addEventListener("focusout",(e=>{this.nameElem&&!this.nameElem.value&&(this.nameElem.value=t,this.player?.setName(o.nextEventID(),t))}));const e=(t,e)=>{if(null!=this.player){if(t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all",this.player){var a=this.player.toProto(!0);t.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...c.toBinary(a))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,e)}else t.preventDefault()},s=this.rootElem.querySelector(".player-edit"),i=this.rootElem.querySelector(".player-copy"),r=this.rootElem.querySelector(".player-delete");a.getOrCreateInstance(s),a.getOrCreateInstance(i);const n=a.getOrCreateInstance(r);this.iconElem.ondragstart=t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),e(t,3)},s.onclick=t=>{new Xt(this.player)},i.ondragstart=t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),e(t,4)},r.onclick=t=>{n.hide(),this.setPlayer(o.nextEventID(),null,0)}}}class Xt extends ct{constructor(t){super(document.body,"player-editor-modal",{closeButton:{fixed:!0},header:!1}),this.rootElem.id="playerEditorModal",this.body.insertAdjacentHTML("beforeend",'\n\t\t\t<div class="player-editor within-raid-sim"></div>\n\t\t');const e=this.rootElem.getElementsByClassName("player-editor")[0];Nt[t.spec](e,t)}}class Zt extends r{constructor(t,s){super(t,"new-player-picker-root"),e(this,"raidPicker"),this.raidPicker=s,m(p).forEach((t=>{if(t==p.ClassUnknown)return;const e=Vt.filter((e=>u[e.spec]==t));if(0==e.length)return;const s=document.createElement("div");s.classList.add("class-presets-container",`bg-${h(t)}-dampened`),this.rootElem.appendChild(s),e.forEach((t=>{const e=document.createElement("fragment");e.innerHTML=`\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="${t.tooltip}"\n\t\t\t\t\t\tdata-bs-html="true"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class="preset-picker-icon player-icon" src="${t.iconUrl}"/>\n\t\t\t\t\t</a>\n\t\t\t\t`;const i=e.children[0];s.appendChild(i),a.getOrCreateInstance(i),i.ondragstart=e=>{const a=o.nextEventID();o.freezeAllAndDo((()=>{const s=new Image;s.src=t.iconUrl,e.dataTransfer.setDragImage(s,30,30),e.dataTransfer.setData("text/plain",""),e.dataTransfer.dropEffect="copy";const i=new ot(t.spec,this.raidPicker.raid.sim);i.applySharedDefaults(a),i.setRace(a,t.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),i.setTalentsString(a,t.talents.talentsString),i.setSpecOptions(a,t.specOptions),i.setConsumes(a,t.consumes),i.setName(a,t.defaultName),i.setProfession1(a,t.otherDefaults?.profession1||f.Engineering),i.setProfession2(a,t.otherDefaults?.profession2||f.Jewelcrafting),i.setDistanceFromTarget(a,t.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{i.setGear(a,this.raidPicker.raid.sim.db.lookupEquipmentSpec(t.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]))})),this.raidPicker.setDragPlayer(i,zt,1)}))}}))}))}}class Qt extends r{constructor(t,a){super(t,"raid-stats"),e(this,"categories");let s=[];ce.sections.forEach((t=>{const e=document.createElement("div");e.classList.add("raid-stats-section"),this.rootElem.appendChild(e),e.innerHTML=`\n\t\t\t\t<div class="raid-stats-section-header">\n\t\t\t\t\t<label class="raid-stats-section-label form-label">${t.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class="raid-stats-section-content"></div>\n\t\t\t`;const i=e.getElementsByClassName("raid-stats-section-content")[0];t.categories.forEach((t=>{s.push(new Yt(i,a,t))}))})),this.categories=s,a.changeEmitter.on((t=>this.categories.forEach((t=>t.update()))))}}class Yt extends r{constructor(t,s,i){if(super(t,"raid-stats-category-root"),e(this,"raidSimUI"),e(this,"options"),e(this,"effects"),e(this,"counterElem"),e(this,"tooltipElem"),this.raidSimUI=s,this.options=i,this.rootElem.innerHTML=`\n\t\t\t<a href="javascript:void(0)" role="button" class="raid-stats-category">\n\t\t\t\t<span class="raid-stats-category-counter"></span>\n\t\t\t\t<span class="raid-stats-category-label">${i.label}</span>\n\t\t\t</a>\n\t\t`,this.counterElem=this.rootElem.querySelector(".raid-stats-category-counter"),this.tooltipElem=document.createElement("div"),this.tooltipElem.innerHTML=`\n\t\t\t<label class="raid-stats-category-label">${i.label}</label>\n\t\t`,this.effects=i.effects.map((t=>new te(this.tooltipElem,s,t))),1!=i.effects.length||i.effects[0].playerData?.class){const t=this.rootElem.querySelector(".raid-stats-category");a.getOrCreateInstance(t,{customClass:"raid-stats-category-tooltip",html:!0,placement:"right",title:this.tooltipElem})}}update(){this.effects.forEach((t=>t.update()));const t=R(this.effects.map((t=>t.count)));this.counterElem.textContent=String(t);const e=this.rootElem.querySelector(".raid-stats-category");0==t?e?.classList.remove("active"):e?.classList.add("active")}}class te extends r{constructor(t,a,s){if(super(t,"raid-stats-effect"),e(this,"raidSimUI"),e(this,"options"),e(this,"counterElem"),e(this,"curPlayers"),e(this,"count"),this.raidSimUI=a,this.options=s,this.curPlayers=[],this.count=0,this.rootElem.innerHTML=`\n\t\t\t<span class="raid-stats-effect-counter"></span>\n\t\t\t<img class="raid-stats-effect-icon"></img>\n\t\t\t<span class="raid-stats-effect-label">${s.label}</span>\n\t\t`,this.counterElem=this.rootElem.querySelector(".raid-stats-effect-counter"),this.options.playerData?.class){const t=this.rootElem.querySelector(".raid-stats-effect-label"),e=U(this.options.playerData.class);t.classList.add(e)}const i=this.rootElem.querySelector(".raid-stats-effect-icon");s.actionId?s.actionId.fill().then((t=>i.src=t.iconUrl)):i.remove()}update(){this.options.playerData&&(this.curPlayers=this.raidSimUI.getActivePlayers().filter((t=>this.options.playerData.condition(t))));const t=this.options.raidData&&this.options.raidData(this.raidSimUI.sim.raid);this.count=this.curPlayers.length+(t?1:0),this.counterElem.textContent=String(this.count),0==this.count?this.rootElem.classList.remove("active"):this.rootElem.classList.add("active")}}function ee(t,e){return e?!t:t}function ae(t,e){return{class:t,condition:a=>a.isClass(t)&&(!e||e(a))}}function se(t,e,a,s){return{class:t,condition:i=>i.isClass(t)&&ee(Boolean(i.getTalents()[e]),a)&&(!s||s(i))}}function ie(t,e,a){return se(t,e,!1,a)}function re(t,e,a){return se(t,e,!0,a)}function ne(t,e,a,s){return{class:u[t],condition:i=>i.isSpec(t)&&ee(Boolean(i.getTalents()[e]),a)&&(!s||s(i))}}function le(t,e,a){return ne(t,e,!1,a)}function oe(t){return e=>Boolean(e.getBuffs()[t])}const ce={sections:[{label:"Roles",categories:[{label:"Tanks",effects:[{label:"Tanks",playerData:{condition:t=>g(t.spec)}}]},{label:"Healers",effects:[{label:"Healers",playerData:{condition:t=>I(t.spec)}}]},{label:"Melee",effects:[{label:"Melee",playerData:{condition:t=>P(t.spec)}}]},{label:"Ranged",effects:[{label:"Ranged",playerData:{condition:t=>S(t.spec)}}]}]},{label:"Buffs",categories:[{label:"Bloodlust",effects:[{label:"Bloodlust",actionId:E.fromSpellId(2825),playerData:ae(p.ClassShaman)}]},{label:"Stats",effects:[{label:"Improved Gift of the Wild",actionId:E.fromSpellId(17051),playerData:ie(p.ClassDruid,"improvedMarkOfTheWild")},{label:"Gift of the Wild",actionId:E.fromSpellId(48470),playerData:re(p.ClassDruid,"improvedMarkOfTheWild")}]},{label:"Stats %",effects:[{label:"Blessing of Kings",actionId:E.fromSpellId(25898),playerData:ae(p.ClassPaladin)}]},{label:"Armor",effects:[{label:"Improved Devotion Aura",actionId:E.fromSpellId(20140),playerData:ie(p.ClassPaladin,"improvedDevotionAura",(t=>t.getSpecOptions().aura==k.DevotionAura))},{label:"Devotion Aura",actionId:E.fromSpellId(48942),playerData:re(p.ClassPaladin,"improvedDevotionAura",(t=>t.getSpecOptions().aura==k.DevotionAura))},{label:"Improved Stoneskin Totem",actionId:E.fromSpellId(16293),playerData:ie(p.ClassShaman,"guardianTotems",(t=>t.getSpecOptions().totems?.earth==v.StoneskinTotem))},{label:"Stoneskin Totem",actionId:E.fromSpellId(58753),playerData:re(p.ClassShaman,"guardianTotems",(t=>t.getSpecOptions().totems?.earth==v.StoneskinTotem))},{label:"Scroll of Protection",actionId:E.fromItemId(43468),raidData:oe("scrollOfProtection")}]},{label:"Stamina",effects:[{label:"Improved Power Word Fortitude",actionId:E.fromSpellId(14767),playerData:ie(p.ClassPriest,"improvedPowerWordFortitude")},{label:"Power Word Fortitude",actionId:E.fromSpellId(48161),playerData:re(p.ClassPriest,"improvedPowerWordFortitude")},{label:"Scroll of Stamina",actionId:E.fromItemId(37094),raidData:oe("scrollOfStamina")}]},{label:"Str + Agi",effects:[{label:"Strength of Earth Totem",actionId:E.fromSpellId(58643),playerData:re(p.ClassShaman,"enhancingTotems",(t=>t.getSpecOptions().totems?.earth==v.StrengthOfEarthTotem))},{label:"Scroll of Strength",actionId:E.fromItemId(43466),raidData:oe("scrollOfStrength")},{label:"Scroll of Agility",actionId:E.fromItemId(43464),raidData:oe("scrollOfAgility")}]},{label:"Intellect",effects:[{label:"Arcane Brilliance",actionId:E.fromSpellId(43002),playerData:ae(p.ClassMage)},{label:"Scroll of Intellect",actionId:E.fromItemId(37092),raidData:oe("scrollOfIntellect")}]},{label:"Spirit",effects:[{label:"Divine Spirit",actionId:E.fromSpellId(48073),playerData:ae(p.ClassPriest)},{label:"Scroll of Spirit",actionId:E.fromItemId(10306),raidData:oe("scrollOfSpirit")}]},{label:"Atk Pwr",effects:[{label:"Improved Blessing of Might",actionId:E.fromSpellId(20045),playerData:ae(p.ClassPaladin)},{label:"Blessing of Might",actionId:E.fromSpellId(48934),playerData:ae(p.ClassPaladin)},{label:"Improved Battle Shout",actionId:E.fromSpellId(12861),playerData:ie(p.ClassWarrior,"improvedBattleShout",(t=>t.getSpecOptions().shout==C.WarriorShoutBattle))},{label:"Battle Shout",actionId:E.fromSpellId(47436),playerData:re(p.ClassWarrior,"improvedBattleShout",(t=>t.getSpecOptions().shout==C.WarriorShoutBattle))}]},{label:"Atk Pwr %",effects:[{label:"Trueshot Aura",actionId:E.fromSpellId(19506),playerData:ie(p.ClassHunter,"trueshotAura")}]},{label:"Mit %",effects:[{label:"Blessing Of Sanctuary",actionId:E.fromSpellId(25899),playerData:ae(p.ClassPaladin)}]},{label:"MP5",effects:[{label:"Improved Blessing of Wisdom",actionId:E.fromSpellId(20245),playerData:ie(p.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Blessing of Wisdom",actionId:E.fromSpellId(48938),playerData:re(p.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Improved Mana Spring Totem",actionId:E.fromSpellId(16206),playerData:ie(p.ClassShaman,"restorativeTotems",(t=>t.getSpecOptions().totems?.water==w.ManaSpringTotem))},{label:"Mana Spring Totem",actionId:E.fromSpellId(58774),playerData:re(p.ClassShaman,"restorativeTotems",(t=>t.getSpecOptions().totems?.water==w.ManaSpringTotem))}]},{label:"Melee Crit",effects:[{label:"Leader of the Pack",actionId:E.fromSpellId(17007),playerData:ie(p.ClassDruid,"leaderOfThePack")}]},{label:"Melee Haste",effects:[]},{label:"Spell Crit",effects:[{label:"Moonkin Form",actionId:E.fromSpellId(24907),playerData:le(s.SpecBalanceDruid,"moonkinForm")}]},{label:"Health",effects:[{label:"Improved Imp",actionId:E.fromSpellId(18696),playerData:ie(p.ClassWarlock,"improvedImp",(t=>t.getSpecOptions().summon==T.Imp))},{label:"Blood Pact",actionId:E.fromSpellId(47982),playerData:re(p.ClassWarlock,"improvedImp",(t=>t.getSpecOptions().summon==T.Imp))}]}]},{label:"External Buffs",categories:[{label:"Innervate",effects:[{label:"Innervate",actionId:E.fromSpellId(29166),playerData:ae(p.ClassDruid)}]},{label:"Power Infusion",effects:[{label:"Power Infusion",actionId:E.fromSpellId(10060),playerData:ie(p.ClassPriest,"powerInfusion")}]}]},{label:"DPS Debuffs",categories:[{label:"Major ArP",effects:[{label:"Sunder Armor",actionId:E.fromSpellId(7386),playerData:ae(p.ClassWarrior)},{label:"Expose Armor",actionId:E.fromSpellId(8647),playerData:ae(p.ClassRogue)}]},{label:"Minor ArP",effects:[{label:"Faerie Fire",actionId:E.fromSpellId(770),playerData:ae(p.ClassDruid,(t=>t.spec!=s.SpecRestorationDruid))},{label:"Spore Cloud",actionId:E.fromSpellId(53598),playerData:ae(p.ClassHunter,(t=>t.getSpecOptions().petType==b.Bat))}]},{label:"Bleed",effects:[{label:"Mangle",actionId:E.fromSpellId(16862),playerData:ae(p.ClassDruid,(t=>[s.SpecFeralDruid,s.SpecFeralTankDruid].includes(t.spec)))}]}]},{label:"Mitigation Debuffs",categories:[{label:"Atk Pwr",effects:[{label:"Vindication",actionId:E.fromSpellId(26016),playerData:ie(p.ClassPaladin,"vindication",(t=>[s.SpecRetributionPaladin,s.SpecProtectionPaladin].includes(t.spec)))},{label:"Improved Demoralizing Shout",actionId:E.fromSpellId(12879),playerData:ie(p.ClassWarrior,"improvedDemoralizingShout")},{label:"Demoralizing Shout",actionId:E.fromSpellId(11556),playerData:re(p.ClassWarrior,"improvedDemoralizingShout")},{label:"Improved Demoralizing Roar",actionId:E.fromSpellId(16862),playerData:le(s.SpecFeralTankDruid,"feralAggression",(t=>t.getSimpleRotation().maintainDemoralizingRoar))},{label:"Demoralizing Roar",actionId:E.fromSpellId(9898),playerData:(de=s.SpecFeralTankDruid,he="feralAggression",me=t=>t.getSimpleRotation().maintainDemoralizingRoar,ne(de,he,!0,me))},{label:"Demoralizing Screech",actionId:E.fromSpellId(55487),playerData:ae(p.ClassHunter,(t=>t.getSpecOptions().petType==b.CarrionBird))}]},{label:"Atk Speed",effects:[{label:"Improved Thunder Clap",actionId:E.fromSpellId(12666),playerData:ie(p.ClassWarrior,"improvedThunderClap")},{label:"Thunder Clap",actionId:E.fromSpellId(47502),playerData:re(p.ClassWarrior,"improvedThunderClap")}]},{label:"Miss",effects:[{label:"Insect Swarm",actionId:E.fromSpellId(24977),playerData:le(s.SpecBalanceDruid,"insectSwarm")},{label:"Scorpid Sting",actionId:E.fromSpellId(3043),playerData:ae(p.ClassHunter,(t=>t.getSimpleRotation().sting==D.ScorpidSting))}]}]}]};var de,he,me;class pe extends dt{constructor(t,a){super(t,a,{identifier:"raid-tab",title:"Raid"}),e(this,"simUI"),e(this,"leftPanel"),e(this,"rightPanel"),this.simUI=a,this.rootElem.classList.add("active","show"),this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-tab-left","tab-panel-left"),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-tab-right","tab-panel-right"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.simUI.raidPicker=new Gt(this.leftPanel,this.simUI),new Qt(this.leftPanel,this.simUI);const t=new ht(this.rightPanel,this.simUI,{label:"Raid",header:{title:"Saved Raid Groups"},storageKey:this.simUI.getSavedRaidStorageKey(),getData:t=>x.create({raid:this.simUI.sim.raid.toProto(),blessings:this.simUI.blessingsPicker.getAssignments(),faction:this.simUI.sim.getFaction(),phase:this.simUI.sim.getPhase()}),setData:(t,e,a)=>{o.freezeAllAndDo((()=>{this.simUI.sim.raid.fromProto(t,a.raid||O.create()),this.simUI.blessingsPicker.setAssignments(t,a.blessings||L.create()),a.faction&&this.simUI.sim.setFaction(t,a.faction),a.phase&&this.simUI.sim.setPhase(t,a.phase)}))},changeEmitters:[this.simUI.changeEmitter,this.simUI.sim.changeEmitter],equals:(t,e)=>x.equals(t,e),toJson:t=>x.toJson(t),fromJson:t=>x.fromJson(t)});this.simUI.sim.waitForInit().then((()=>{t.loadUserData()}))}}class ue extends A{constructor(t,a,s,i){super(t,"raid-target-picker-root",s,i),e(this,"config"),e(this,"raid"),e(this,"curPlayer"),e(this,"curUnitReference"),e(this,"currentOptions"),e(this,"buttonElem"),e(this,"dropdownElem"),this.rootElem.classList.add("dropdown"),this.config=i,this.raid=a,this.curPlayer=this.raid.getPlayerFromUnitReference(i.getValue(s)),this.curUnitReference=this.getInputValue(),this.rootElem.innerHTML='\n\t\t\t<a\n\t\t\t\tclass="raid-target-picker-button"\n\t\t\t\thref="javascript:void(0)"\n\t\t\t\trole="button"\n\t\t\t\tdata-bs-toggle="dropdown"\n\t\t\t></a>\n\t\t\t<div class="dropdown-menu"></div>\n    ',this.buttonElem=this.rootElem.querySelector(".raid-target-picker-button"),this.dropdownElem=this.rootElem.querySelector(".dropdown-menu"),this.buttonElem.addEventListener("click",(t=>t.preventDefault())),this.currentOptions=[],this.updateOptions(o.nextEventID()),i.compChangeEmitter.on((t=>this.updateOptions(t))),this.init()}makeTargetOptions(){return[{player:null,isDropdown:!0},...this.raid.getPlayers().filter((t=>null!=t)).map((t=>({player:t,isDropdown:!0})))]}updateOptions(t){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((t=>this.dropdownElem.appendChild(this.makeOption(t))));const e=this.curUnitReference;this.curUnitReference=this.getInputValue(),B.equals(e,this.curUnitReference)?this.setInputValue(this.curUnitReference):this.inputChanged(t)}makeOption(t){const e=ue.makeOptionElem(t);return e.addEventListener("click",(e=>{e.preventDefault(),this.curPlayer=t.player,this.curUnitReference=this.getInputValue(),this.inputChanged(o.nextEventID())})),e}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeUnitReference():M()}setInputValue(t){this.curUnitReference=B.clone(t),this.curPlayer=this.raid.getPlayerFromUnitReference(this.curUnitReference);const e=this.currentOptions.find((t=>t.player==this.curPlayer));e&&(this.buttonElem.innerHTML=ue.makeOptionElem({player:e.player}).outerHTML)}static makeOptionElem(t){const e=t.player?h(t.player.getClass()):"";let a=document.createElement("fragment");return a.innerHTML=`\n\t\t\t<div class="player ${e?`bg-${e}-dampened`:""}">\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t${t.player?`<img class="player-icon" src="${t.player.getSpecIcon()}" draggable="false"/>`:""}\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<span class="player-name ${e?`text-${e}`:""}">\n\t\t\t\t\t\t\t${t.player?t.player.getName():"Unassigned"}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,t.isDropdown&&(a.innerHTML=`\n\t\t\t\t<a class="dropdown-option" href="javascript:void(0) role="button">${a.innerHTML}</a>\n\t\t\t`),a.children[0]}}class fe extends r{constructor(t,a){super(t,"assignments-picker-root"),e(this,"raidSimUI"),e(this,"changeEmitter",new o),e(this,"innervatesPicker"),e(this,"powerInfusionsPicker"),this.raidSimUI=a,this.innervatesPicker=new ye(this.rootElem,a),this.powerInfusionsPicker=new Ie(this.rootElem,a)}}class ge extends r{constructor(t,a){super(t,"assigned-buff-picker-root"),e(this,"raidSimUI"),e(this,"changeEmitter",new o),e(this,"playersContainer"),e(this,"targetPickers"),this.raidSimUI=a,this.targetPickers=[],this.playersContainer=document.createElement("div"),this.playersContainer.classList.add("assigned-buff-container"),this.rootElem.appendChild(this.playersContainer),this.raidSimUI.changeEmitter.on((()=>this.update())),this.update()}update(){this.playersContainer.innerHTML=`\n\t\t\t<label class="assignmented-buff-label form-label">${this.getTitle()}</label>\n\t\t`;const t=this.getSourcePlayers();0==t.length?this.rootElem.classList.add("hide"):this.rootElem.classList.remove("hide"),this.targetPickers=t.map((t=>{const e=document.createElement("div");e.classList.add("assigned-buff-player","input-inline"),this.playersContainer.appendChild(e);let a=document.createElement("div");a.classList.add("raid-target-picker-root"),a.appendChild(ue.makeOptionElem({player:t,isDropdown:!1})),e.appendChild(a);const s=document.createElement("i");s.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),e.appendChild(s);const i=new ue(e,this.raidSimUI.sim.raid,t,{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:t=>t.specOptionsChangeEmitter,getValue:t=>this.getPlayerValue(t),setValue:(t,e,a)=>this.setPlayerValue(t,e,a)}),r={player:t,targetPicker:i,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromUnitReference(i.getInputValue())};return i.changeEmitter.on((t=>{r.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromUnitReference(i.getInputValue())})),r}))}}class ye extends ge{getTitle(){return"Innervate"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(p.ClassDruid)))}getPlayerValue(t){return t.getSpecOptions().innervateTarget||M()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.innervateTarget=a,e.setSpecOptions(t,s)}}class Ie extends ge{getTitle(){return"Power Infusion"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(p.ClassPriest)&&t.getTalents().powerInfusion))}getPlayerValue(t){return t.getSpecOptions().powerInfusionTarget||M()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.powerInfusionTarget=a,e.setSpecOptions(t,s)}}class Pe extends r{constructor(t,a){super(t,"blessings-picker-root"),e(this,"simUI"),e(this,"changeEmitter",new o),e(this,"pickers",[]),e(this,"assignments"),this.simUI=a,this.assignments=L.clone(W(4));const s=i.filter((t=>Jt.includes(t))),r=[...Array(4).keys()];s.map((t=>{const e=document.createElement("div");e.classList.add("blessings-picker-row"),this.rootElem.appendChild(e),e.append(this.buildSpecIcon(t));const a=document.createElement("div");return a.classList.add("blessings-picker-container"),e.appendChild(a),r.forEach((e=>{this.pickers[e]||this.pickers.push([]);const s=new mt(a,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:F[p.ClassPaladin],value:H.BlessingUnknown},{actionId:()=>E.fromSpellId(25898),value:H.BlessingOfKings},{actionId:()=>E.fromSpellId(48934),value:H.BlessingOfMight},{actionId:()=>E.fromSpellId(48938),value:H.BlessingOfWisdom},{actionId:()=>E.fromSpellId(25899),value:H.BlessingOfSanctuary}],equals:(t,e)=>t==e,zeroValue:H.BlessingUnknown,enableWhen:t=>{const a=Math.min(this.simUI.getClassCount(p.ClassPaladin),4);return e<a},changedEvent:t=>t.changeEmitter,getValue:a=>a.assignments.paladins[e]?.blessings[t]||H.BlessingUnknown,setValue:(a,s,i)=>{s.assignments.paladins[e].blessings[t]!=i&&(s.assignments.paladins[e].blessings[t]=i,this.changeEmitter.emit(a))}});this.pickers[e].push(s)})),e})),this.updatePickers(),this.simUI.compChangeEmitter.on((t=>this.updatePickers()))}updatePickers(){for(let t=0;t<4;t++)this.pickers[t].forEach((t=>t.update()))}buildSpecIcon(t){let e=document.createElement("fragment");e.innerHTML=`\n\t\t\t<div class="blessings-picker-spec">\n\t\t\t\t<img\n\t\t\t\t\tsrc="${$[t]}"\n\t\t\t\t\tclass="blessings-spec-icon"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;const s=e.querySelector(".blessings-spec-icon");return a.getOrCreateInstance(s,{title:j[t]}),e.children[0]}getAssignments(){return L.clone(this.assignments)}setAssignments(t,e){this.assignments=L.clone(e),this.changeEmitter.emit(t)}}class Se extends r{constructor(t,a){super(t,"tanks-picker-root"),e(this,"raidSimUI"),this.raidSimUI=a;const s=this.raidSimUI.sim.raid;for(let e=0;e<4;e++){const t=document.createElement("div");t.classList.add("tank-picker-row","input-inline"),this.rootElem.appendChild(t);const a=document.createElement("label");a.textContent=0==e?"Main Tank":`Tank ${e+1}`,a.classList.add("tank-picker-label","form-label"),t.appendChild(a),new ue(t,s,s,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:s.compChangeEmitter,changedEvent:t=>t.tanksChangeEmitter,getValue:t=>t.getTanks()[e]||M(),setValue:(t,a,s)=>{const i=a.getTanks();for(let r=0;r<e;r++)i[r]||i.push(M());i[e]=s,a.setTanks(t,i)}})}}}class Ee extends dt{constructor(t,a){super(t,a,{identifier:"raid-settings-tab",title:"Settings"}),e(this,"simUI"),e(this,"leftPanel"),e(this,"rightPanel"),e(this,"column1",this.buildColumn(1,"raid-settings-col")),e(this,"column2",this.buildColumn(2,"raid-settings-col")),e(this,"column3",this.buildColumn(3,"raid-settings-col")),this.simUI=a,this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-settings-tab-left","tab-panel-left"),this.leftPanel.appendChild(this.column1),this.leftPanel.appendChild(this.column2),this.leftPanel.appendChild(this.column3),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-settings-tab-right","tab-panel-right","within-raid-sim-hide"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.buildEncounterSettings(),this.buildConsumesSettings(),this.buildOtherSettings(),this.buildTankSettings(),this.buildAssignmentSettings(),this.buildBlessingsPicker(),this.buildSavedDataPickers()}buildEncounterSettings(){const t=new pt(this.column1,"encounter-settings",{header:{title:"Encounter"}});new ut(t.bodyElement,this.simUI.sim.encounter,{showExecuteProportion:!0},this.simUI)}buildConsumesSettings(){const t=new pt(this.column1,"consumes-settings",{header:{title:"Consumables"}});let e=document.createElement("div");e.classList.add("consumes-container"),t.bodyElement.appendChild(e),this.makeBooleanRaidIconBuffInput(e,E.fromItemId(37094),"scrollOfStamina"),this.makeBooleanRaidIconBuffInput(e,E.fromItemId(43466),"scrollOfStrength"),this.makeBooleanRaidIconBuffInput(e,E.fromItemId(43464),"scrollOfAgility"),this.makeBooleanRaidIconBuffInput(e,E.fromItemId(37092),"scrollOfIntellect"),this.makeBooleanRaidIconBuffInput(e,E.fromItemId(37098),"scrollOfSpirit"),this.makeBooleanRaidIconBuffInput(e,E.fromItemId(43468),"scrollOfProtection")}buildOtherSettings(){}buildTankSettings(){const t=new pt(this.column2,"tanks-settings",{header:{title:"Tanks"}});new Se(t.bodyElement,this.simUI)}buildAssignmentSettings(){const t=new pt(this.column2,"assignments-settings",{header:{title:"External Buffs"}});new fe(t.bodyElement,this.simUI)}buildBlessingsPicker(){const t=new pt(this.column3,"blessings-settings",{header:{title:"Blessings",tooltip:ft}});this.simUI.blessingsPicker=new Pe(t.bodyElement,this.simUI),this.simUI.blessingsPicker.changeEmitter.on((t=>this.simUI.changeEmitter.emit(t)))}buildSavedDataPickers(){const t=new ht(this.rightPanel,this.simUI.sim.encounter,{label:"Encounter",header:{title:"Saved Encounters"},storageKey:this.simUI.getSavedEncounterStorageKey(),getData:t=>q.create({encounter:t.toProto()}),setData:(t,e,a)=>e.fromProto(t,a.encounter),changeEmitters:[this.simUI.sim.encounter.changeEmitter],equals:(t,e)=>q.equals(t,e),toJson:t=>q.toJson(t),fromJson:t=>q.fromJson(t)});this.simUI.sim.waitForInit().then((()=>{t.loadUserData()}))}makeBooleanRaidIconBuffInput(t,e,a){const s=this.simUI.sim.raid;return new gt(t,s,{actionId:()=>e,states:2,changedEvent:t=>t.buffsChangeEmitter,getValue:t=>t.getBuffs()[a],setValue:(t,e,s)=>{const i=e.getBuffs();i[a]=s,e.setBuffs(t,i)}})}}class be extends yt{constructor(t,a){super(t,a,"JSON Import",!0),e(this,"simUI"),this.simUI=a,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t"}onImport(t){const e=V.fromJsonString(t,{ignoreUnknownFields:!0});this.simUI.fromProto(o.nextEventID(),e),this.close()}}class De extends It{constructor(t,a){super(t,a,{title:"JSON Export",allowDownload:!0}),e(this,"simUI"),this.simUI=a,this.init()}getData(){return JSON.stringify(V.toJson(this.simUI.toProto()),null,2)}}class ke extends yt{constructor(t,a){super(t,a,"WCL Import",!1),e(this,"queryCounter",0),e(this,"simUI"),e(this,"token",""),this.simUI=a,this.textElem.classList.add("small-textarea"),this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items and enchants)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Heroic Presence, Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t"}async getWCLBearerToken(){if(""==this.token){const t=await fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}),e=await t.json();this.token=e.access_token}return this.token}async queryWCL(t){const e={"Content-Type":"application/json",Authorization:`Bearer ${await this.getWCLBearerToken()}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${t}`;this.queryCounter++;const s=await fetch(encodeURI(a),{method:"GET",headers:e}),i=await s.json();if(i?.errors?.length){const e=i.errors.map((t=>t.message)).join("\n");throw new Error(`GraphQL error: ${e}\n\nQuery: ${t}`)}return console.debug(`WCL query: ${t}\n\nResult: ${JSON.stringify(i)}`),i}async parseURL(t){const e=t.match(/classic\.warcraftlogs\.com\/reports\/([a-zA-Z0-9:]+)\/?(#.*fight=((\d+)|(last)))?/);if(!e)throw new Error(`Invalid WCL URL ${t}, must look like "classic.warcraftlogs.com/reports/XXXX"`);const a={reportID:e[1],fightID:""};if(e[2]&&e[3]&&"last"!=e[3])a.fightID=e[3];else{const t=`{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: "${a.reportID}") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`,s=(await this.queryWCL(t)).data.reportData.report.fights;"last"==e[3]?a.fightID=String(s[s.length-1].id):a.fightID=String(s[0].id)}return console.debug(`Importing WCL report: ${JSON.stringify(a)}`),a}async getRateLimit(){return(await this.queryWCL("{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }")).data.rateLimitData}async onImport(t){this.importButton.disabled=!0,this.rootElem.style.cursor="wait";try{await this.doImport(t)}catch(e){console.error(e),alert("Failed import from WCL: "+e)}this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}async doImport(t){if(!t.length)throw new Error("No import link provided!");const e=await this.parseURL(t);await this.getRateLimit();const a=`{\n\t\t\treportData {\n\t\t\t\treport(code: "${e.reportID}") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${e.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${e.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${e.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: "${[we,Te].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${e.fightID}], dataType:Casts, filterExpression: "${[Re].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${e.fightID}], dataType:Healing, filterExpression: "${[Ue,xe].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${e.fightID}], dataType:Resources, filterExpression: "ability.id = 39609", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`,s=(await this.queryWCL(a)).data.reportData.report,i=s.playerDetails.data.entries;o.freezeAllAndDo((()=>{const t=o.nextEventID(),e=i.map((e=>new ve(e,this.simUI,t)));this.inferRace(t,s,e),this.inferProfessions(t,s,e),this.inferAssignments(t,s,e),this.inferPartyComposition(t,s,e);const a=e.filter((t=>t.player.getClass()==p.ClassPaladin)).length,r=V.create({encounter:this.getEncounterProto(s),raid:this.getRaidProto(e),blessings:W(a)});this.simUI.clearRaid(t),this.simUI.fromProto(t,r)})),this.close()}inferRace(t,e,a){a.forEach((e=>e.player.setRace(t,N.RaceUnknown)));let s=e.guild?.faction?.id||this.simUI.raidPicker?.getCurrentFaction()||n.Horde;const i=J(e.reportCastEvents.data,(t=>String(t.abilityGameID)));we.forEach((e=>{(i[e.id]||[]).forEach((i=>{const r=a.find((t=>t.id==i.sourceID));r&&(console.log(`Inferring player ${r.name} has race ${z.get(e.race)} from ${e.name} event`),r.player.setRace(t,e.race),s=G[e.race])}))})),a.forEach((e=>{e.player.getRace()==N.RaceUnknown&&e.player.setRace(t,e.preset.defaultFactionRaces[s])}))}inferProfessions(t,e,a){const s=J(e.reportCastEvents.data,(t=>String(t.abilityGameID)));Te.forEach((t=>{(s[t.id]||[]).forEach((e=>{const s=a.find((t=>t.id==e.sourceID));s&&!s.inferredProfessions.includes(t.profession)&&(console.log(`Inferring player ${s.name} has profession ${_.get(t.profession)} from ${t.name} event`),s.inferredProfessions.push(t.profession))}))})),a.forEach((e=>{let a=K(e.inferredProfessions.concat(e.player.getGear().getProfessionRequirements()));0==a.length?a=[f.Engineering,f.Jewelcrafting]:1==a.length&&(a[0]!=f.Engineering?a.push(f.Engineering):a.push(f.Jewelcrafting)),e.player.setProfessions(t,a)}))}inferAssignments(t,e,a){const s=J(e.fightCastEvents.data,(t=>String(t.abilityGameID)));Re.forEach((e=>{(s[e.id]||[]).forEach((s=>{const i=a.find((t=>t.id==s.sourceID)),r=a.find((t=>t.id==s.targetID));if(i&&r&&i.player.getClass()==e.class){const a=e.applyFunc(i.player,r.toUnitReference());i.player.setSpecOptions(t,a),console.log(`Inferring player ${i.name} is targeting ${r.name} with ${e.name} from cast event`)}}))}))}inferPartyComposition(t,e,a){const s=(t,e,a)=>{(t.addPlayerInParty(e)||e.addPlayerInParty(t))&&console.log(`Inferring players ${t.name} and ${e.name} in same party from ${a} event`)},i=J(e.fightHealEvents.data,(t=>String(t.abilityGameID)));Ue.forEach((t=>{(i[t.id]||[]).forEach((e=>{const i=a.find((t=>t.id==e.sourceID)),r=a.find((t=>t.id==e.targetID));i&&r&&s(i,r,t.name)}))})),xe.forEach((t=>{const e=i[t.id]||[],r=J(e,(t=>String(t.timestamp)+String(t.sourceID)));for(const[i,n]of Object.entries(r)){const e=n.map((t=>a.find((e=>e.id==t.targetID))));for(let a=0;a<e.length;a++)for(let i=0;i<e.length;i++)a!=i&&e[a]&&e[i]&&s(e[a],e[i],t.name)}})),e.combatantInfoEvents.data.forEach((t=>{const e=a.find((e=>e.id==t.sourceID));t.auras.filter((t=>28878==t.ability)).forEach((t=>{const i=a.find((e=>e.id==t.source));i&&e&&s(i,e,"Heroic Presence")}))}));let r=a.filter((t=>t.playersInParty.length>0)),n=0;for(;r.length>0;){let t=[r[0]].concat(r[0].playersInParty),e=0;for(;t.length!=e;)e=t.length,t=K(t.map((t=>[t].concat(t.playersInParty))).flat());const a=n;n++,t.forEach(((t,e)=>{t.raidIndex=5*a+e})),r=r.filter((e=>!t.includes(e)))}const l=[...Array(40).keys()];a.filter((t=>-1==t.raidIndex)).forEach((t=>{const e=l.find((t=>!a.some((e=>e.raidIndex==t))))??-1;if(-1==e)throw new Error("Invalid next idx");t.raidIndex=e}))}getEncounterProto(t){const e=t.fights[0],a=X.create({duration:(e.endTime-e.startTime)/1e3,targets:[]});let s=this.simUI.sim.db.getAllPresetEncounters().find((t=>t.path.includes(e.name)));return s&&s.targets.length&&s.targets.map((t=>t.target)).filter((t=>void 0!==t)).forEach((t=>a.targets.push(t))),0===a.targets.length&&a.targets.push(Pt.defaultTargetProto()),a}getRaidProto(t){const e=O.create({parties:[...new Array(St).keys()].map((()=>Z.create({players:[...new Array(5).keys()].map((()=>c.create()))})))});return t.forEach((t=>{const a=t.raidIndex%5,s=(t.raidIndex-a)/5,i=t.player.toProto();e.parties[s].players[a]=i,g(d(i))&&e.tanks.push(t.toUnitReference())})),e}}class ve{constructor(t,a,s){e(this,"data"),e(this,"id"),e(this,"name"),e(this,"type"),e(this,"raidIndex",-1),e(this,"simUI"),e(this,"fullType"),e(this,"spec"),e(this,"player"),e(this,"preset"),e(this,"inferredProfessions",[]),e(this,"playersInParty",[]),this.simUI=a,this.data=t,this.name=t.name,this.id=t.id,this.type=t.type;const i=t.icon.split("-")[1];this.fullType=this.type+i,console.log(`WCL spec: ${this.fullType}`);const r=Ce[this.fullType]??null;if(null==r)throw new Error("Player type not implemented: "+this.fullType);if(this.spec=r,this.player=new ot(this.spec,a.sim),this.preset=ve.getMatchingPreset(r,t.talents),void 0===this.preset)throw new Error("Could not find matching preset: "+JSON.stringify({name:this.name,type:this.fullType,talents:t.talents}).toString());this.player.applySharedDefaults(s),this.player.setTalentsString(s,this.preset.talents.talentsString),this.player.setConsumes(s,this.preset.consumes),this.player.setSpecOptions(s,this.preset.specOptions),this.player.setProfessions(s,[f.Engineering,f.Jewelcrafting]),this.player.setName(s,t.name),this.player.setGear(s,a.sim.db.lookupEquipmentSpec(Q.create({items:t.gear.map((t=>Y.create({id:t.id,enchant:t.permanentEnchant})))})))}static getMatchingPreset(t,e){const a=Vt.filter((e=>e.spec==t));let s=0;if(a&&a.length>1){let t=999;a.forEach(((a,i)=>{const r=tt(a.talents.talentsString),n=r.reduce(((t,a,s)=>t+Math.abs(e[s]?.guid-r[s])),0);n<t&&(s=i,t=n)}))}return a[s]}toUnitReference(){return B.create({type:et.Player,index:this.raidIndex})}addPlayerInParty(t){return t!=this&&!this.playersInParty.includes(t)&&(this.playersInParty.push(t),!0)}}const Ce={DruidBalance:s.SpecBalanceDruid,DruidFeral:s.SpecFeralDruid,DruidWarden:s.SpecFeralTankDruid,DruidGuardian:s.SpecFeralTankDruid,DruidRestoration:s.SpecRestorationDruid,HunterBeastMastery:s.SpecHunter,HunterSurvival:s.SpecHunter,HunterMarksmanship:s.SpecHunter,MageArcane:s.SpecMage,MageFire:s.SpecMage,MageFrost:s.SpecMage,PaladinHoly:s.SpecHolyPaladin,PaladinJusticar:s.SpecProtectionPaladin,PaladinProtection:s.SpecProtectionPaladin,PaladinRetribution:s.SpecRetributionPaladin,PriestHoly:s.SpecHealingPriest,PriestDiscipline:s.SpecHealingPriest,PriestShadow:s.SpecShadowPriest,RogueAssassination:s.SpecRogue,RogueCombat:s.SpecRogue,RogueSubtlety:s.SpecRogue,ShamanElemental:s.SpecElementalShaman,ShamanEnhancement:s.SpecEnhancementShaman,ShamanRestoration:s.SpecRestorationShaman,WarlockDestruction:s.SpecWarlock,WarlockAffliction:s.SpecWarlock,WarlockDemonology:s.SpecWarlock,WarriorArms:s.SpecWarrior,WarriorFury:s.SpecWarrior,WarriorChampion:s.SpecWarrior,WarriorWarrior:s.SpecWarrior,WarriorGladiator:s.SpecWarrior,WarriorProtection:s.SpecProtectionWarrior},we=[{id:26297,name:"Berserking",race:N.RaceTroll},{id:20572,name:"Blood Fury (AP)",race:N.RaceOrc},{id:20589,name:"Escape Artist",race:N.RaceGnome},{id:20594,name:"Stoneform",race:N.RaceDwarf},{id:20549,name:"War Stomp",race:N.RaceTauren},{id:7744,name:"Will of the Forsaken",race:N.RaceUndead},{id:59752,name:"Will to Survive",race:N.RaceHuman}],Te=[{id:55503,name:"Lifeblood",profession:f.Herbalism},{id:50305,name:"Skinning",profession:f.Skinning}],Re=[{id:29166,name:"Innervate",class:p.ClassDruid,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.innervateTarget=e,a}},{id:10060,name:"Power Infusion",class:p.ClassPriest,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.powerInfusionTarget=e,a}},{id:57933,name:"Tricks of the Trade",class:p.ClassRogue,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.tricksOfTheTradeTarget=e,a}}],Ue=[{id:52042,name:"Healing Stream Totem"},{id:48076,name:"Holy Nova"},{id:48445,name:"Tranquility"},{id:15290,name:"Vampiric Embrace"}],xe=[{id:48072,name:"Prayer of Healing"}],Oe=[];new class extends Et{constructor(t,a){super(t,new bt,{cssClass:"raid-sim-ui",cssScheme:"raid",spec:null,launchStatus:Dt,knownIssues:(a.knownIssues||[]).concat(Oe)}),e(this,"config"),e(this,"raidSimResultsManager",null),e(this,"raidPicker",null),e(this,"blessingsPicker",null),e(this,"compChangeEmitter",new o),e(this,"changeEmitter",new o),e(this,"referenceChangeEmitter",new o),this.config=a,this.sim.raid.compChangeEmitter.on((t=>this.compChangeEmitter.emit(t))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((t=>t.on((t=>this.changeEmitter.emit(t))))),this.changeEmitter.on((()=>this.recomputeSettingsLayout())),this.sim.setModifyRaidProto((t=>this.modifyRaidProto(t))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab()}loadSettings(){const t=o.nextEventID();o.freezeAllAndDo((()=>{let e=!1;const a=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=a)try{const s=V.fromJsonString(a);this.fromProto(t,s),e=!0}catch(s){console.warn("Failed to parse saved settings: "+s)}e||this.applyDefaults(t),this.changeEmitter.on((t=>{const e=V.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),e)}))}))}addSidebarComponents(){this.raidSimResultsManager=at(this),this.raidSimResultsManager.changeEmitter.on((t=>this.referenceChangeEmitter.emit(t)))}addTopbarComponents(){this.simHeader.addImportLink("JSON",(t=>new be(this.rootElem,this))),this.simHeader.addImportLink("WCL",(t=>new ke(this.rootElem,this))),this.simHeader.addExportLink("JSON",(t=>new De(this.rootElem,this)))}addRaidTab(){new pe(this.simTabContentsContainer,this)}addSettingsTab(){new Ee(this.simTabContentsContainer,this)}addDetailedResultsTab(){this.addTab("Results","detailed-results-tab",'\n\t\t\t<div class="detailed-results">\n\t\t\t</div>\n\t\t'),new st(this.rootElem.getElementsByClassName("detailed-results")[0],this,this.raidSimResultsManager)}recomputeSettingsLayout(){window.dispatchEvent(new Event("resize"))}modifyRaidProto(t){const e=this.getClassCount(p.ClassPaladin),a=this.blessingsPicker.getAssignments();Jt.forEach((s=>{const i=t.parties.map((t=>t.players.filter((t=>t.class!=p.ClassUnknown&&d(t)==s)))).flat();a.paladins.forEach(((t,a)=>{a>=e||(t.blessings[s]==H.BlessingOfKings?i.forEach((t=>t.buffs.blessingOfKings=!0)):t.blessings[s]==H.BlessingOfMight?i.forEach((t=>t.buffs.blessingOfMight=it.TristateEffectImproved)):t.blessings[s]==H.BlessingOfWisdom?i.forEach((t=>t.buffs.blessingOfWisdom=it.TristateEffectImproved)):t.blessings[s]==H.BlessingOfSanctuary&&i.forEach((t=>t.buffs.blessingOfSanctuary=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getActivePlayers(){return this.sim.raid.getActivePlayers()}getClassCount(t){return this.getActivePlayers().filter((e=>e.isClass(t))).length}applyDefaults(t){o.freezeAllAndDo((()=>{this.sim.raid.fromProto(t,O.create({numActiveParties:5})),this.sim.setPhase(t,1),this.sim.encounter.applyDefaults(t),this.sim.applyDefaults(t,!0,!0),this.sim.setShowDamageMetrics(t,!0)}))}toProto(){return V.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),blessings:this.blessingsPicker.getAssignments(),encounter:this.sim.encounter.toProto()})}toLink(){const t=this.toProto();t.settings=void 0;const e=V.toBinary(t),a=pako.deflate(e,{to:"string"}),s=btoa(String.fromCharCode(...a)),i=new URL(window.location.href);return i.hash=s,i.toString()}fromProto(t,e){o.freezeAllAndDo((()=>{e.settings&&this.sim.fromProto(t,e.settings),this.sim.raid.fromProto(t,e.raid||O.create()),this.sim.encounter.fromProto(t,e.encounter||X.create()),this.blessingsPicker.setAssignments(t,e.blessings||L.create())}))}clearRaid(t){this.sim.raid.clear(t)}getStorageKey(t){return"__wotlk_raid__"+t}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
//# sourceMappingURL=index-6ba1ce9d.entry.js.map
